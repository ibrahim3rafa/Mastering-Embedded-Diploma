
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001094  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011e4  080011e4  000111ec  2**0
                  CONTENTS
  4 .ARM          00000000  080011e4  080011e4  000111ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011e4  080011ec  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011e4  080011e4  000111e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011e8  080011e8  000111e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  080011ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  080011ec  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dcb  00000000  00000000  00011215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001070  00000000  00000000  00017fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001356  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  0001a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0001a698  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000030d8  00000000  00000000  0001a900  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000373f  00000000  00000000  0001d9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c2f5  00000000  00000000  00021117  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d40c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009c8  00000000  00000000  0002d488  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011ac 	.word	0x080011ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011ac 	.word	0x080011ac

08000170 <EEPROM_Init>:


#include"I2C_EEPROM_SLAVE.h"
#include "I2C.h"

void EEPROM_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//	PB7 = SDA

	I2C_Config_t I2C1CFG;

	// i2C ACT AS MASTER
	I2C1CFG.I2C_Acknowledge_Mode = I2C_ACK_RETURNED;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	613b      	str	r3, [r7, #16]
	I2C1CFG.I2C_Clock_Freq = I2C_SCLK_SM_100K;
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <EEPROM_Init+0x38>)
 800017e:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Clock_Stretch_Mode = I2C_CLK_STRETCH_EN;
 8000180:	2300      	movs	r3, #0
 8000182:	60bb      	str	r3, [r7, #8]
	I2C1CFG.I2C_General_Call_Mode = I2C_GENERAL_CALL_EN;
 8000184:	2340      	movs	r3, #64	; 0x40
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1CFG.I2C_SM_Bus_Mode = I2C_I2C_Mode;
 8000188:	2300      	movs	r3, #0
 800018a:	617b      	str	r3, [r7, #20]
	I2C1CFG.P_Slave_Event_CallBack = NULL;
 800018c:	2300      	movs	r3, #0
 800018e:	627b      	str	r3, [r7, #36]	; 0x24

	MCAL_I2C_Set_GPIO_PINS(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 faab 	bl	80006ec <MCAL_I2C_Set_GPIO_PINS>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 f992 	bl	80004c4 <MCAL_I2C_Init>


}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_WRITE_NBytes>:


unsigned char EEPROM_WRITE_NBytes(unsigned int Memory_Address, unsigned char* Bytes, uint8_t datalen){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i ;
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_Address >> 8);  // higher address
 80001c6:	f107 030c 	add.w	r3, r7, #12
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	0a1b      	lsrs	r3, r3, #8
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address); 	//lower address
 80001d6:	f107 030c 	add.w	r3, r7, #12
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	705a      	strb	r2, [r3, #1]

	for(i = 2 ; i<datalen ; i++){
 80001e4:	2302      	movs	r3, #2
 80001e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001ea:	e011      	b.n	8000210 <EEPROM_WRITE_NBytes+0x60>
		buffer[i] = Bytes[i-2];}
 80001ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f0:	3b02      	subs	r3, #2
 80001f2:	f107 0208 	add.w	r2, r7, #8
 80001f6:	6812      	ldr	r2, [r2, #0]
 80001f8:	441a      	add	r2, r3
 80001fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001fe:	7811      	ldrb	r1, [r2, #0]
 8000200:	f107 0214 	add.w	r2, r7, #20
 8000204:	54d1      	strb	r1, [r2, r3]
	for(i = 2 ; i<datalen ; i++){
 8000206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020a:	3301      	adds	r3, #1
 800020c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000210:	1dfb      	adds	r3, r7, #7
 8000212:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	429a      	cmp	r2, r3
 800021a:	d3e7      	bcc.n	80001ec <EEPROM_WRITE_NBytes+0x3c>

	MCAL_I2C_Master_TX(I2C1, EEPROM_ADDRESS, buffer, datalen+2 , withstop, start);
 800021c:	1dfb      	adds	r3, r7, #7
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	3302      	adds	r3, #2
 8000222:	4619      	mov	r1, r3
 8000224:	f107 0214 	add.w	r2, r7, #20
 8000228:	2300      	movs	r3, #0
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2300      	movs	r3, #0
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	460b      	mov	r3, r1
 8000232:	212a      	movs	r1, #42	; 0x2a
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <EEPROM_WRITE_NBytes+0x98>)
 8000236:	f000 faa3 	bl	8000780 <MCAL_I2C_Master_TX>

	return 0;
 800023a:	2300      	movs	r3, #0
}
 800023c:	4618      	mov	r0, r3
 800023e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40005400 	.word	0x40005400

0800024c <EEPROM_READ_NBytes>:



unsigned char EEPROM_READ_NBytes(unsigned int Address, uint8_t* dataOut, uint8_t datalen){
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af02      	add	r7, sp, #8
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	4613      	mov	r3, r2
 8000258:	71fb      	strb	r3, [r7, #7]

	unsigned char buffer[2];
	buffer[0] = Address>>8;		//upper address
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	0a1b      	lsrs	r3, r3, #8
 800025e:	b2db      	uxtb	r3, r3
 8000260:	753b      	strb	r3, [r7, #20]
	buffer[1] = Address ; 			// lower address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_ADDRESS, buffer, (2), withoutstop, start);   //write address
 8000268:	f107 0214 	add.w	r2, r7, #20
 800026c:	2300      	movs	r3, #0
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	2301      	movs	r3, #1
 8000272:	9300      	str	r3, [sp, #0]
 8000274:	2302      	movs	r3, #2
 8000276:	212a      	movs	r1, #42	; 0x2a
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <EEPROM_READ_NBytes+0x54>)
 800027a:	f000 fa81 	bl	8000780 <MCAL_I2C_Master_TX>

	MCAL_I2C_Master_RX(I2C1, EEPROM_ADDRESS, dataOut, datalen, withstop, repeatedstart);		//read
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	2301      	movs	r3, #1
 8000282:	9301      	str	r3, [sp, #4]
 8000284:	2300      	movs	r3, #0
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	4613      	mov	r3, r2
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	212a      	movs	r1, #42	; 0x2a
 800028e:	4804      	ldr	r0, [pc, #16]	; (80002a0 <EEPROM_READ_NBytes+0x54>)
 8000290:	f000 faca 	bl	8000828 <MCAL_I2C_Master_RX>

	return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40005400 	.word	0x40005400

080002a4 <EXTI0_IRQHandler>:




/* EXTI Line0 interrupt                             */
void EXTI0_IRQHandler(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI0); 		//Clear Pending register
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[0]() ;			//Call function in application layer
 80002b4:	4b03      	ldr	r3, [pc, #12]	; (80002c4 <EXTI0_IRQHandler+0x20>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4798      	blx	r3
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010400 	.word	0x40010400
 80002c4:	20000070 	.word	0x20000070

080002c8 <EXTI1_IRQHandler>:


/* EXTI Line1interrupt                             */
void EXTI1_IRQHandler(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI1); 		//Clear Pending register
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <EXTI1_IRQHandler+0x1c>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[1]() ;			//Call function in application layer
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <EXTI1_IRQHandler+0x20>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4798      	blx	r3
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010400 	.word	0x40010400
 80002e8:	20000070 	.word	0x20000070

080002ec <EXTI2_IRQHandler>:

/* EXTI Line2 interrupt                             */
void EXTI2_IRQHandler(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI2); 		//Clear Pending register
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <EXTI2_IRQHandler+0x1c>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[2]() ;			//Call function in application layer
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <EXTI2_IRQHandler+0x20>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4798      	blx	r3
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40010400 	.word	0x40010400
 800030c:	20000070 	.word	0x20000070

08000310 <EXTI3_IRQHandler>:

/* EXTI Line3 interrupt                             */
void EXTI3_IRQHandler(){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI3); 		//Clear Pending register
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI3_IRQHandler+0x1c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <EXTI3_IRQHandler+0x1c>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[3]() ;			//Call function in application layer
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <EXTI3_IRQHandler+0x20>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4798      	blx	r3
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	20000070 	.word	0x20000070

08000334 <EXTI4_IRQHandler>:

/* EXTI Line4 interrupt                             */
void EXTI4_IRQHandler(){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI4); 		//Clear Pending register
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <EXTI4_IRQHandler+0x1c>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[4]() ;			//Call function in application layer
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <EXTI4_IRQHandler+0x20>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	4798      	blx	r3
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010400 	.word	0x40010400
 8000354:	20000070 	.word	0x20000070

08000358 <EXTI9_5_IRQHandler>:

/* EXTI Line[9:5] interrupts                        */
void EXTI9_5_IRQHandler(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	if(EXTI->PR & (1<<5)){
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI9_5_IRQHandler+0x22>
	EXTI->PR |= (1<<EXTI5); 		//Clear Pending register
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[5]() ;			//Call function in application layer
 8000374:	4b21      	ldr	r3, [pc, #132]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<6)){
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000382:	2b00      	cmp	r3, #0
 8000384:	d008      	beq.n	8000398 <EXTI9_5_IRQHandler+0x40>
	EXTI->PR |= (1<<EXTI6); 		//Clear Pending register
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a1b      	ldr	r2, [pc, #108]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[6]() ;			//Call function in application layer
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<7)){
 8000398:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <EXTI9_5_IRQHandler+0x5e>
	EXTI->PR |= (1<<EXTI7); 		//Clear Pending register
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[7]() ;			//Call function in application layer
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<8)){
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d008      	beq.n	80003d4 <EXTI9_5_IRQHandler+0x7c>
	EXTI->PR |= (1<<EXTI8); 		//Clear Pending register
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003cc:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[8]() ;			//Call function in application layer
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<9)){
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d008      	beq.n	80003f2 <EXTI9_5_IRQHandler+0x9a>
	EXTI->PR |= (1<<EXTI9); 		//Clear Pending register
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ea:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[9]() ;			//Call function in application layer
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <EXTI9_5_IRQHandler+0xa4>)
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	4798      	blx	r3
	}

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010400 	.word	0x40010400
 80003fc:	20000070 	.word	0x20000070

08000400 <EXTI15_10_IRQHandler>:
/* EXTI Line[15:10] interrupts                      */
void EXTI15_10_IRQHandler(){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

	if(EXTI->PR & (1<<10)){
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI15_10_IRQHandler+0x22>
	EXTI->PR |= (1<<EXTI10); 		//Clear Pending register
 8000410:	4b2a      	ldr	r3, [pc, #168]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041a:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[10]() ;			//Call function in application layer
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800041e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000420:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<11)){
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042a:	2b00      	cmp	r3, #0
 800042c:	d008      	beq.n	8000440 <EXTI15_10_IRQHandler+0x40>
	EXTI->PR |= (1<<EXTI11); 		//Clear Pending register
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a22      	ldr	r2, [pc, #136]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000434:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000438:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[11]() ;			//Call function in application layer
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<12)){
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000448:	2b00      	cmp	r3, #0
 800044a:	d008      	beq.n	800045e <EXTI15_10_IRQHandler+0x5e>
	EXTI->PR |= (1<<EXTI12); 		//Clear Pending register
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[12]() ;			//Call function in application layer
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<13)){
 800045e:	4b17      	ldr	r3, [pc, #92]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d008      	beq.n	800047c <EXTI15_10_IRQHandler+0x7c>
	EXTI->PR |= (1<<EXTI13); 		//Clear Pending register
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 8000470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000474:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[13]() ;			//Call function in application layer
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<14)){
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d008      	beq.n	800049a <EXTI15_10_IRQHandler+0x9a>
	EXTI->PR |= (1<<EXTI14); 		//Clear Pending register
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800048e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000492:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[14]() ;			//Call function in application layer
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 8000496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000498:	4798      	blx	r3
	}
	if(EXTI->PR & (1<<15)){
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d008      	beq.n	80004b8 <EXTI15_10_IRQHandler+0xb8>
	EXTI->PR |= (1<<EXTI15); 		//Clear Pending register
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b0:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[15]() ;			//Call function in application layer
 80004b2:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <EXTI15_10_IRQHandler+0xc0>)
 80004b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b6:	4798      	blx	r3
	}
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010400 	.word	0x40010400
 80004c0:	20000070 	.word	0x20000070

080004c4 <MCAL_I2C_Init>:
 * @retval 				- None
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void MCAL_I2C_Init(I2C_typedef* I2Cx, I2C_Config_t * I2C_Config){
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]

	uint16_t tempreg = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	82fb      	strh	r3, [r7, #22]
	uint16_t freqrange = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000;
 80004d6:	4b7c      	ldr	r3, [pc, #496]	; (80006c8 <MCAL_I2C_Init+0x204>)
 80004d8:	613b      	str	r3, [r7, #16]
	uint16_t result = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock
	if(I2Cx == I2C1){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a7a      	ldr	r2, [pc, #488]	; (80006cc <MCAL_I2C_Init+0x208>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d110      	bne.n	8000508 <MCAL_I2C_Init+0x44>
		Gp_I2C_Config[I2C1_INDEX] = *I2C_Config;
 80004e6:	4a7a      	ldr	r2, [pc, #488]	; (80006d0 <MCAL_I2C_Init+0x20c>)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	4614      	mov	r4, r2
 80004ec:	461d      	mov	r5, r3
 80004ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f6:	682b      	ldr	r3, [r5, #0]
 80004f8:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_Enable();
 80004fa:	4b76      	ldr	r3, [pc, #472]	; (80006d4 <MCAL_I2C_Init+0x210>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a75      	ldr	r2, [pc, #468]	; (80006d4 <MCAL_I2C_Init+0x210>)
 8000500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	e010      	b.n	800052a <MCAL_I2C_Init+0x66>

	}else{
		Gp_I2C_Config[I2C2_INDEX] = *I2C_Config;
 8000508:	4b71      	ldr	r3, [pc, #452]	; (80006d0 <MCAL_I2C_Init+0x20c>)
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000510:	4615      	mov	r5, r2
 8000512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051a:	682b      	ldr	r3, [r5, #0]
 800051c:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_Enable();
 800051e:	4b6d      	ldr	r3, [pc, #436]	; (80006d4 <MCAL_I2C_Init+0x210>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a6c      	ldr	r2, [pc, #432]	; (80006d4 <MCAL_I2C_Init+0x210>)
 8000524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000528:	61d3      	str	r3, [r2, #28]

	}


	//MODE
	if(I2C_Config->I2C_SM_Bus_Mode == I2C_I2C_Mode){
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	691b      	ldr	r3, [r3, #16]
 800052e:	2b00      	cmp	r3, #0
 8000530:	f040 8082 	bne.w	8000638 <MCAL_I2C_Init+0x174>

		/****************INIT TIME*************/
		//I2C_CR2 Bits 5:0 FREQ[5:0]: Peripheral clock frequency from APB1

		//copy content of CR2
		tempreg = I2Cx->CR2;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	82fb      	strh	r3, [r7, #22]

		//clear freq[5:0];
		tempreg &= ~(I2C_CR2_FREQ_Msk);
 800053a:	8afb      	ldrh	r3, [r7, #22]
 800053c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000540:	82fb      	strh	r3, [r7, #22]

		//get pclk1 freq
		pclk1 = MCAL_RCC_GetPCLK1_CLCKFreq();
 8000542:	f000 fc01 	bl	8000d48 <MCAL_RCC_GetPCLK1_CLCKFreq>
 8000546:	6138      	str	r0, [r7, #16]

		//set freq depending on pclk value
		freqrange = (uint16_t) (pclk1 / 1000000);
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	4a63      	ldr	r2, [pc, #396]	; (80006d8 <MCAL_I2C_Init+0x214>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	0c9b      	lsrs	r3, r3, #18
 8000552:	82bb      	strh	r3, [r7, #20]

		//put freqrange value in tempreg
		tempreg |= freqrange;
 8000554:	8afa      	ldrh	r2, [r7, #22]
 8000556:	8abb      	ldrh	r3, [r7, #20]
 8000558:	4313      	orrs	r3, r2
 800055a:	82fb      	strh	r3, [r7, #22]

		//write to CR2
		I2Cx->CR2 = tempreg;
 800055c:	8afa      	ldrh	r2, [r7, #22]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]

		//2- Configure the clock control register (Thigh = CCR * TPCLK1)
		//Disable the peripheral in PE bit to configure the time
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f023 0201 	bic.w	r2, r3, #1
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]

		//clear tempreg to use it again
		tempreg = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	82fb      	strh	r3, [r7, #22]

		/*Configure speed in I2C standard mode*/
		if((I2C_Config->I2C_Clock_Freq == I2C_SCLK_SM_50K ) || (I2C_Config->I2C_Clock_Freq == I2C_SCLK_SM_100K)){
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f24c 3250 	movw	r2, #50000	; 0xc350
 800057a:	4293      	cmp	r3, r2
 800057c:	d004      	beq.n	8000588 <MCAL_I2C_Init+0xc4>
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a56      	ldr	r2, [pc, #344]	; (80006dc <MCAL_I2C_Init+0x218>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d112      	bne.n	80005ae <MCAL_I2C_Init+0xea>
			/*standard mode calculation*/
			//Tclk / 2 = CRR * Tpclk1
			//CRR = Tclk / (2  * Tpclk1)
			//CRR = Fpclk1 / (2 * Fclk)
			result = (uint16_t) (pclk1 / (I2C_Config->I2C_Clock_Freq << 1));
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	fbb2 f3f3 	udiv	r3, r2, r3
 8000594:	81fb      	strh	r3, [r7, #14]

			tempreg |= result;
 8000596:	8afa      	ldrh	r2, [r7, #22]
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	4313      	orrs	r3, r2
 800059c:	82fb      	strh	r3, [r7, #22]

			//write to ccr
			I2Cx->CCR = tempreg;
 800059e:	8afa      	ldrh	r2, [r7, #22]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	61da      	str	r2, [r3, #28]
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.
			//			(1000 ns / 125 ns = 8 + 1)
			//

			I2Cx->TRISE = freqrange + 1;
 80005a4:	8abb      	ldrh	r3, [r7, #20]
 80005a6:	3301      	adds	r3, #1
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	621a      	str	r2, [r3, #32]
			//Fast mode not supported
		}


		/***************CR1 configuration ****************/
		tempreg = 0 ;
 80005ae:	2300      	movs	r3, #0
 80005b0:	82fb      	strh	r3, [r7, #22]

		//copy content of cr1 reg in tempreg
		tempreg = I2Cx->CR1;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	82fb      	strh	r3, [r7, #22]

		//edit on tempreg
		tempreg |=(uint16_t)((I2C_Config->I2C_Clock_Stretch_Mode) | (I2C_Config->I2C_Acknowledge_Mode) | (I2C_Config->I2C_SM_Bus_Mode) | (I2C_Config->I2C_General_Call_Mode));
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	8afb      	ldrh	r3, [r7, #22]
 80005de:	4313      	orrs	r3, r2
 80005e0:	82fb      	strh	r3, [r7, #22]

		I2Cx->CR1 = tempreg;
 80005e2:	8afa      	ldrh	r2, [r7, #22]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]

		/***************OAR1 &OAR2 configuration ****************/
		tempreg = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	82fb      	strh	r3, [r7, #22]

		if(I2C_Config->I2C_Slave_Address_Mode.Dual_Address_Enable == 1){
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	8a9b      	ldrh	r3, [r3, #20]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d10d      	bne.n	8000610 <MCAL_I2C_Init+0x14c>

			tempreg = I2C_OAR2_ENDUAL;
 80005f4:	2301      	movs	r3, #1
 80005f6:	82fb      	strh	r3, [r7, #22]

			tempreg |= I2C_Config->I2C_Slave_Address_Mode.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	8b1b      	ldrh	r3, [r3, #24]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	b21a      	sxth	r2, r3
 8000600:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	82fb      	strh	r3, [r7, #22]

			I2Cx->OAR2 = tempreg;
 800060a:	8afa      	ldrh	r2, [r7, #22]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	60da      	str	r2, [r3, #12]

		}

		tempreg = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	82fb      	strh	r3, [r7, #22]

		tempreg |= I2C_Config->I2C_Slave_Address_Mode.Primary_Slave_Address << 1;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	8adb      	ldrh	r3, [r3, #22]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	b21a      	sxth	r2, r3
 800061c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000620:	4313      	orrs	r3, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	82fb      	strh	r3, [r7, #22]

		tempreg |=  I2C_Config->I2C_Slave_Address_Mode.Addressing_Bits;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	b29a      	uxth	r2, r3
 800062c:	8afb      	ldrh	r3, [r7, #22]
 800062e:	4313      	orrs	r3, r2
 8000630:	82fb      	strh	r3, [r7, #22]

		I2Cx->OAR1 = tempreg;
 8000632:	8afa      	ldrh	r2, [r7, #22]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	609a      	str	r2, [r3, #8]
		//SMBUS Not Supported
	}


	//Interrupt mode (slave mode) // check if p_CallBack_pointer != NULL
	if(I2C_Config->P_Slave_Event_CallBack != NULL){
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d038      	beq.n	80006b2 <MCAL_I2C_Init+0x1ee>
		///enable IRQ
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <MCAL_I2C_Init+0x208>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d10c      	bne.n	8000686 <MCAL_I2C_Init+0x1c2>
			NVIC_I2C1_EV_IRQ_Enable;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MCAL_I2C_Init+0x21c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MCAL_I2C_Init+0x21c>)
 8000672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000676:	6013      	str	r3, [r2, #0]
			NVIC_I2C1_ER_IRQ_Enable;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MCAL_I2C_Init+0x220>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <MCAL_I2C_Init+0x220>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	e00f      	b.n	80006a6 <MCAL_I2C_Init+0x1e2>

		}else if (I2Cx == I2C2){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <MCAL_I2C_Init+0x224>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d10b      	bne.n	80006a6 <MCAL_I2C_Init+0x1e2>
			NVIC_I2C2_EV_IRQ_Enable;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MCAL_I2C_Init+0x220>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MCAL_I2C_Init+0x220>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6013      	str	r3, [r2, #0]
			NVIC_I2C2_ER_IRQ_Enable;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MCAL_I2C_Init+0x220>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <MCAL_I2C_Init+0x220>)
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6013      	str	r3, [r2, #0]

		}
		I2Cx->SR1 = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
	}

	/*Enable the selected I2C peripheral*/
	I2Cx->CR1 |= I2C_CR1_PE;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f043 0201 	orr.w	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]



}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bdb0      	pop	{r4, r5, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	007a1200 	.word	0x007a1200
 80006cc:	40005400 	.word	0x40005400
 80006d0:	2000001c 	.word	0x2000001c
 80006d4:	40021000 	.word	0x40021000
 80006d8:	431bde83 	.word	0x431bde83
 80006dc:	000186a0 	.word	0x000186a0
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000e104 	.word	0xe000e104
 80006e8:	40005800 	.word	0x40005800

080006ec <MCAL_I2C_Set_GPIO_PINS>:
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @retval 				- None
 * Note					- None
 *
 */
void MCAL_I2C_Set_GPIO_PINS(I2C_typedef* I2Cx){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	GPIO_pinConfig gpio_pinCfg;

	if(I2Cx == I2C1){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MCAL_I2C_Set_GPIO_PINS+0x88>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d118      	bne.n	800072e <MCAL_I2C_Set_GPIO_PINS+0x42>
		//PB6 SCL
		//PB7 SDA
		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_6;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	81bb      	strh	r3, [r7, #12]
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000700:	2301      	movs	r3, #1
 8000702:	73fb      	strb	r3, [r7, #15]
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
 8000704:	2307      	movs	r3, #7
 8000706:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <MCAL_I2C_Set_GPIO_PINS+0x8c>)
 8000710:	f000 fc0b 	bl	8000f2a <MCAL_GPIO_init>

		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_7;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	81bb      	strh	r3, [r7, #12]
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
 800071c:	2307      	movs	r3, #7
 800071e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <MCAL_I2C_Set_GPIO_PINS+0x8c>)
 8000728:	f000 fbff 	bl	8000f2a <MCAL_GPIO_init>
		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_11;
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);
	}
}
 800072c:	e01d      	b.n	800076a <MCAL_I2C_Set_GPIO_PINS+0x7e>
	}else if(I2Cx == I2C2){
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MCAL_I2C_Set_GPIO_PINS+0x90>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d119      	bne.n	800076a <MCAL_I2C_Set_GPIO_PINS+0x7e>
		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_10;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	81bb      	strh	r3, [r7, #12]
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
 8000740:	2307      	movs	r3, #7
 8000742:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <MCAL_I2C_Set_GPIO_PINS+0x8c>)
 800074c:	f000 fbed 	bl	8000f2a <MCAL_GPIO_init>
		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_11;
 8000750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000754:	81bb      	strh	r3, [r7, #12]
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000756:	2301      	movs	r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
 800075a:	2307      	movs	r3, #7
 800075c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MCAL_I2C_Set_GPIO_PINS+0x8c>)
 8000766:	f000 fbe0 	bl	8000f2a <MCAL_GPIO_init>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40005400 	.word	0x40005400
 8000778:	40010c00 	.word	0x40010c00
 800077c:	40005800 	.word	0x40005800

08000780 <MCAL_I2C_Master_TX>:
 * @param [in] 			- start: If you want to send a Start or repeated start
 * @retval 				- None
 * Note					- Supports Master in polling mechanism
 *
 */
void MCAL_I2C_Master_TX(I2C_typedef* I2Cx ,uint16_t devAdd, uint8_t*  dataOut, uint32_t dataLen, StopCondition stop , RepeatedStart start  ){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	460b      	mov	r3, r1
 800078e:	817b      	strh	r3, [r7, #10]

	int i ;

	//1.set start bit in I2C_CR1
	I2C_Generate_Start(I2Cx, ENABLE, start);
 8000790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000794:	461a      	mov	r2, r3
 8000796:	2101      	movs	r1, #1
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f000 f8b7 	bl	800090c <I2C_Generate_Start>

	//2. wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_Get_FlagStatus(I2Cx, EV5)));
 800079e:	bf00      	nop
 80007a0:	2101      	movs	r1, #1
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f000 f8f4 	bl	8000990 <I2C_Get_FlagStatus>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0f8      	beq.n	80007a0 <MCAL_I2C_Master_TX+0x20>

	//3.writing DR register with Address
	I2C_SendAddress(I2Cx, devAdd, I2C_Direction_Transmission); //address
 80007ae:	897b      	ldrh	r3, [r7, #10]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f000 f969 	bl	8000a8c <I2C_SendAddress>

	// wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_Get_FlagStatus(I2Cx, EV6)));
 80007ba:	bf00      	nop
 80007bc:	2102      	movs	r1, #2
 80007be:	68f8      	ldr	r0, [r7, #12]
 80007c0:	f000 f8e6 	bl	8000990 <I2C_Get_FlagStatus>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f8      	beq.n	80007bc <MCAL_I2C_Master_TX+0x3c>

	//4. check : TRA , BUSY , MSL , TXE flags
	while(!(I2C_Get_FlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING)));
 80007ca:	bf00      	nop
 80007cc:	4915      	ldr	r1, [pc, #84]	; (8000824 <MCAL_I2C_Master_TX+0xa4>)
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 f8de 	bl	8000990 <I2C_Get_FlagStatus>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f8      	beq.n	80007cc <MCAL_I2C_Master_TX+0x4c>

	for(i = 0 ; i<dataLen ; i++){
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	e011      	b.n	8000804 <MCAL_I2C_Master_TX+0x84>
		I2Cx->DR = dataOut[i];
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	611a      	str	r2, [r3, #16]
		//5.wait EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!(I2C_Get_FlagStatus(I2Cx, EV8)));
 80007ee:	bf00      	nop
 80007f0:	2104      	movs	r1, #4
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f000 f8cc 	bl	8000990 <I2C_Get_FlagStatus>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f8      	beq.n	80007f0 <MCAL_I2C_Master_TX+0x70>
	for(i = 0 ; i<dataLen ; i++){
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8e9      	bhi.n	80007e0 <MCAL_I2C_Master_TX+0x60>
	//	EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));


	//6. Stop condition
	if(stop == withstop){
 800080c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d103      	bne.n	800081c <MCAL_I2C_Master_TX+0x9c>
		I2C_Generate_Stop(I2Cx,ENABLE);
 8000814:	2101      	movs	r1, #1
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f000 f89f 	bl	800095a <I2C_Generate_Stop>
	}

}
 800081c:	bf00      	nop
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	00070080 	.word	0x00070080

08000828 <MCAL_I2C_Master_RX>:
 * @param [in] 			- start: If you want to send a Start or repeated start
 * @retval 				- None
 * Note					- Supports Master in polling mechanism
 *
 */
void MCAL_I2C_Master_RX(I2C_typedef* I2Cx ,uint16_t devAdd, uint8_t*  dataOut, uint32_t dataLen, StopCondition stop , RepeatedStart start  ){
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	460b      	mov	r3, r1
 8000836:	817b      	strh	r3, [r7, #10]

	uint8_t index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4a32      	ldr	r2, [pc, #200]	; (8000904 <MCAL_I2C_Master_RX+0xdc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	74fb      	strb	r3, [r7, #19]

	int i ;

	//1.set start bit in I2C_CR1
	I2C_Generate_Start(I2Cx, ENABLE, start);
 8000848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800084c:	461a      	mov	r2, r3
 800084e:	2101      	movs	r1, #1
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f85b 	bl	800090c <I2C_Generate_Start>

	//2. wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_Get_FlagStatus(I2Cx, EV5)));
 8000856:	bf00      	nop
 8000858:	2101      	movs	r1, #1
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f000 f898 	bl	8000990 <I2C_Get_FlagStatus>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f8      	beq.n	8000858 <MCAL_I2C_Master_RX+0x30>

	//3.writing DR register with Address
	I2C_SendAddress(I2Cx, devAdd, I2C_Direction_Receive); //address
 8000866:	897b      	ldrh	r3, [r7, #10]
 8000868:	2201      	movs	r2, #1
 800086a:	4619      	mov	r1, r3
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f000 f90d 	bl	8000a8c <I2C_SendAddress>

	// wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_Get_FlagStatus(I2Cx, EV6)));
 8000872:	bf00      	nop
 8000874:	2102      	movs	r1, #2
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f000 f88a 	bl	8000990 <I2C_Get_FlagStatus>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f8      	beq.n	8000874 <MCAL_I2C_Master_RX+0x4c>

	I2C_Acknowledge_Config(I2Cx,ENABLE);
 8000882:	2101      	movs	r1, #1
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f000 f920 	bl	8000aca <I2C_Acknowledge_Config>

	if(dataLen){
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d01c      	beq.n	80008ca <MCAL_I2C_Master_RX+0xa2>
		for(i=dataLen ; i>1 ; i--){
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e012      	b.n	80008bc <MCAL_I2C_Master_RX+0x94>
			// Wait for EV7: RXNE=1, Cleared by reading DR
			while(!(I2C_Get_FlagStatus(I2Cx, EV7)));
 8000896:	bf00      	nop
 8000898:	2105      	movs	r1, #5
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f000 f878 	bl	8000990 <I2C_Get_FlagStatus>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0f8      	beq.n	8000898 <MCAL_I2C_Master_RX+0x70>
			//read data
			*dataOut = I2Cx->DR;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	701a      	strb	r2, [r3, #0]
			//icrement
			dataOut++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3301      	adds	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
		for(i=dataLen ; i>1 ; i--){
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	dce9      	bgt.n	8000896 <MCAL_I2C_Master_RX+0x6e>
		}
		I2C_Acknowledge_Config(I2Cx,DISABLE);
 80008c2:	2100      	movs	r1, #0
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f000 f900 	bl	8000aca <I2C_Acknowledge_Config>
	}

	//6. Stop condition
	if(stop == withstop){
 80008ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d103      	bne.n	80008da <MCAL_I2C_Master_RX+0xb2>
		I2C_Generate_Stop(I2Cx,ENABLE);
 80008d2:	2101      	movs	r1, #1
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f000 f840 	bl	800095a <I2C_Generate_Stop>
	}


	//re enable ack
	if(Gp_I2C_Config[index].I2C_Acknowledge_Mode == I2C_ACK_RETURNED){
 80008da:	7cfa      	ldrb	r2, [r7, #19]
 80008dc:	490a      	ldr	r1, [pc, #40]	; (8000908 <MCAL_I2C_Master_RX+0xe0>)
 80008de:	4613      	mov	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	4413      	add	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	330c      	adds	r3, #12
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008f0:	d103      	bne.n	80008fa <MCAL_I2C_Master_RX+0xd2>
		I2C_Acknowledge_Config(I2Cx,ENABLE);
 80008f2:	2101      	movs	r1, #1
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f000 f8e8 	bl	8000aca <I2C_Acknowledge_Config>
	}
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40005400 	.word	0x40005400
 8000908:	2000001c 	.word	0x2000001c

0800090c <I2C_Generate_Start>:
 * @param [in] 		    - Start: If you want to send a Start or repeated start
 * @retval 				- None
 * Note					- None
 *
 */
void I2C_Generate_Start(I2C_typedef* I2Cx, FunctionalState state, RepeatedStart start){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
 8000918:	4613      	mov	r3, r2
 800091a:	70bb      	strb	r3, [r7, #2]

	//check start condition
	if(start != repeatedstart){
 800091c:	78bb      	ldrb	r3, [r7, #2]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d007      	beq.n	8000932 <I2C_Generate_Start+0x26>
		while(I2C_Get_FlagStatus(I2Cx, I2C_FLAG_BUSY) 	);
 8000922:	bf00      	nop
 8000924:	2100      	movs	r1, #0
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f832 	bl	8000990 <I2C_Get_FlagStatus>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f8      	bne.n	8000924 <I2C_Generate_Start+0x18>
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if(state != DISABLE){
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d006      	beq.n	8000946 <I2C_Generate_Start+0x3a>
		//Enable start bit
		I2Cx->CR1 |= I2C_CR1_START;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	601a      	str	r2, [r3, #0]
	}else{
		//Disable start bit
		I2Cx->CR1 &= ~(I2C_CR1_START);

	}
}
 8000944:	e005      	b.n	8000952 <I2C_Generate_Start+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <I2C_Generate_Stop>:
 * @retval 				- None
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void I2C_Generate_Stop(I2C_typedef * I2Cx, FunctionalState newstate){
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	70fb      	strb	r3, [r7, #3]
	// STOP 9 in CR1

	if(newstate != DISABLE){
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <I2C_Generate_Stop+0x20>
		I2Cx->CR1 |= I2C_CR1_STOP;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	601a      	str	r2, [r3, #0]
	}else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000978:	e005      	b.n	8000986 <I2C_Generate_Stop+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <I2C_Get_FlagStatus>:
 * @retval 				- None
 * Note					- None
 *
 */

FlagStatus I2C_Get_FlagStatus(I2C_typedef* I2Cx , FlagStatus flag ){
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	uint32_t flag1 = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
	uint32_t flag2 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0 ;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
	FlagStatus bitStatus = RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]

	switch(flag){
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d026      	beq.n	80009fe <I2C_Get_FlagStatus+0x6e>
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d804      	bhi.n	80009be <I2C_Get_FlagStatus+0x2e>
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00a      	beq.n	80009ce <I2C_Get_FlagStatus+0x3e>
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d014      	beq.n	80009e6 <I2C_Get_FlagStatus+0x56>
 80009bc:	e05e      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d050      	beq.n	8000a64 <I2C_Get_FlagStatus+0xd4>
 80009c2:	4a31      	ldr	r2, [pc, #196]	; (8000a88 <I2C_Get_FlagStatus+0xf8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d026      	beq.n	8000a16 <I2C_Get_FlagStatus+0x86>
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d03f      	beq.n	8000a4c <I2C_Get_FlagStatus+0xbc>
 80009cc:	e056      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0)
		if(I2Cx->SR2 & I2C_SR2_BUSY )
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <I2C_Get_FlagStatus+0x50>
			bitStatus = SET;
 80009da:	2301      	movs	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
		else
			bitStatus = RESET;
		break;
 80009de:	e04d      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
			bitStatus = RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
		break;
 80009e4:	e04a      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if(I2Cx->SR1 & I2C_SR1_SB)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <I2C_Get_FlagStatus+0x68>
			bitStatus = SET;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
		else
			bitStatus = RESET;
		break;
 80009f6:	e041      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
			bitStatus = RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
		break;
 80009fc:	e03e      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
	case EV6:
		//		Bit 1 ADDR: Address sent (master mode
		//		0: Address mismatched or not received.
		//		1: Received address matched.
		//
		if(I2Cx->SR1 & I2C_SR1_ADDR)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <I2C_Get_FlagStatus+0x80>
			bitStatus = SET;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
		else
			bitStatus = RESET;

		break;
 8000a0e:	e035      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
			bitStatus = RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
		break;
 8000a14:	e032      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>

	case MASTER_BYTE_TRANSMITTING:

		flag1 = I2Cx->SR1;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	617b      	str	r3, [r7, #20]
		lastevent = (flag1 | flag2) & ((uint32_t)(0x00FFFFFF));
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000a32:	613b      	str	r3, [r7, #16]

		if((lastevent & flag ) == flag)
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d102      	bne.n	8000a46 <I2C_Get_FlagStatus+0xb6>
			bitStatus =SET;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
		else
			bitStatus = RESET;
		break;
 8000a44:	e01a      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
			bitStatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
		break;
 8000a4a:	e017      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>

	case EV8:
		//		Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if(I2Cx->SR1 & I2C_SR1_TXE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <I2C_Get_FlagStatus+0xce>
			bitStatus = SET;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
		else
			bitStatus = RESET;
		break;
 8000a5c:	e00e      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>
			bitStatus = RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
		break;
 8000a62:	e00b      	b.n	8000a7c <I2C_Get_FlagStatus+0xec>

	case EV7:
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if(I2Cx->SR1 & I2C_SR1_RXNE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <I2C_Get_FlagStatus+0xe6>
			bitStatus = SET;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
		else
			bitStatus = RESET;
		break;
 8000a74:	e001      	b.n	8000a7a <I2C_Get_FlagStatus+0xea>
			bitStatus = RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
		break;
 8000a7a:	bf00      	nop

	}



	return bitStatus;
 8000a7c:	69fb      	ldr	r3, [r7, #28]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	00070080 	.word	0x00070080

08000a8c <I2C_SendAddress>:
 * @param [in] 			- direction: Determines whether you are a transmitter or reciever
 * @retval 				- None
 * Note					- Supports only 7-bit address mode
 *
 */
void I2C_SendAddress(I2C_typedef* I2Cx , uint16_t Address , I2C_Direction direction ){
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	707b      	strb	r3, [r7, #1]

	Address = (Address << 1);
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	807b      	strh	r3, [r7, #2]

	if(direction != I2C_Direction_Transmission){
 8000aa2:	787b      	ldrb	r3, [r7, #1]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d004      	beq.n	8000ab2 <I2C_SendAddress+0x26>
		//read
		Address |= (1<<0);
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	807b      	strh	r3, [r7, #2]
 8000ab0:	e003      	b.n	8000aba <I2C_SendAddress+0x2e>

	}else{
		//write
		Address &= ~(1<<0);
 8000ab2:	887b      	ldrh	r3, [r7, #2]
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	807b      	strh	r3, [r7, #2]
	}
	//send the address
	I2Cx->DR = Address;
 8000aba:	887a      	ldrh	r2, [r7, #2]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	611a      	str	r2, [r3, #16]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <I2C_Acknowledge_Config>:
 *
 */


void I2C_Acknowledge_Config(I2C_typedef* I2Cx, FunctionalState NewState)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	70fb      	strb	r3, [r7, #3]

	if (NewState != DISABLE)
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <I2C_Acknowledge_Config+0x20>
	{
		/* Enable the acknowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the acknowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000ae8:	e005      	b.n	8000af6 <I2C_Acknowledge_Config+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <Slave_Status>:


void Slave_Status(I2C_typedef* I2Cx, Slave_State state)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]

	uint8_t index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a32      	ldr	r2, [pc, #200]	; (8000bd8 <Slave_Status+0xd8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	bf14      	ite	ne
 8000b14:	2301      	movne	r3, #1
 8000b16:	2300      	moveq	r3, #0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	73fb      	strb	r3, [r7, #15]

	switch(state){
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d856      	bhi.n	8000bd0 <Slave_Status+0xd0>
 8000b22:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <Slave_Status+0x28>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000b43 	.word	0x08000b43
 8000b2c:	08000b3d 	.word	0x08000b3d
 8000b30:	08000b67 	.word	0x08000b67
 8000b34:	08000b7f 	.word	0x08000b7f
 8000b38:	08000ba3 	.word	0x08000ba3

	case I2C_ERROR_AF :

		if(I2Cx->SR2 & (I2C_SR2_TRA)){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
			// slave not send
		}
		break;
 8000b40:	e046      	b.n	8000bd0 <Slave_Status+0xd0>

	case I2C_EV_STOP:

		if(I2Cx->SR2 & (I2C_SR2_TRA)){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d03b      	beq.n	8000bc6 <Slave_Status+0xc6>
			//TELL THE APP stop CONDITION IS SENT
			Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	4922      	ldr	r1, [pc, #136]	; (8000bdc <Slave_Status+0xdc>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3320      	adds	r3, #32
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2000      	movs	r0, #0
 8000b62:	4798      	blx	r3
		}
		break;
 8000b64:	e02f      	b.n	8000bc6 <Slave_Status+0xc6>

	case I2C_EV_ADDR_MATCHED:

		//TELL THE APP stop CONDITION IS SENT
		Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_MATCHED);
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	491c      	ldr	r1, [pc, #112]	; (8000bdc <Slave_Status+0xdc>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	4413      	add	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	440b      	add	r3, r1
 8000b74:	3320      	adds	r3, #32
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2002      	movs	r0, #2
 8000b7a:	4798      	blx	r3

		break;
 8000b7c:	e028      	b.n	8000bd0 <Slave_Status+0xd0>

	case I2C_EV_DATA_REQ:
		if(I2Cx->SR2 & (I2C_SR2_TRA)){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d01f      	beq.n	8000bca <Slave_Status+0xca>
			//TELL THE APP stop CONDITION IS SENT
			Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_MATCHED);
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	4913      	ldr	r1, [pc, #76]	; (8000bdc <Slave_Status+0xdc>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3320      	adds	r3, #32
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	4798      	blx	r3

		}
		break;
 8000ba0:	e013      	b.n	8000bca <Slave_Status+0xca>
	case I2C_EV_DATA_RCV:
		//make sure that the slave in receiver mode

		if(!(I2Cx->SR2 & (I2C_SR2_TRA))){
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10f      	bne.n	8000bce <Slave_Status+0xce>
			// The app should read the data
			Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	490a      	ldr	r1, [pc, #40]	; (8000bdc <Slave_Status+0xdc>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	440b      	add	r3, r1
 8000bbc:	3320      	adds	r3, #32
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	4798      	blx	r3
		}
		break;
 8000bc4:	e003      	b.n	8000bce <Slave_Status+0xce>
		break;
 8000bc6:	bf00      	nop
 8000bc8:	e002      	b.n	8000bd0 <Slave_Status+0xd0>
		break;
 8000bca:	bf00      	nop
 8000bcc:	e000      	b.n	8000bd0 <Slave_Status+0xd0>
		break;
 8000bce:	bf00      	nop

	}

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	2000001c 	.word	0x2000001c

08000be0 <I2C1_EV_IRQHandler>:




//Interrupts
void I2C1_EV_IRQHandler(void){/* I2C1 event interrupt                             */
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
	uint32_t flag1,flag2,flag3;

	I2C_typedef * I2Cx  = I2C1;
 8000bea:	4b34      	ldr	r3, [pc, #208]	; (8000cbc <I2C1_EV_IRQHandler+0xdc>)
 8000bec:	617b      	str	r3, [r7, #20]

	flag1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf6:	613b      	str	r3, [r7, #16]
	flag2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c00:	60fb      	str	r3, [r7, #12]

	flag3 = I2Cx->CR1 & (I2C_SR1_STOPF);
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	60bb      	str	r3, [r7, #8]

	//handle STOPF EV
	if(flag1 && flag3){
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00a      	beq.n	8000c28 <I2C1_EV_IRQHandler+0x48>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d007      	beq.n	8000c28 <I2C1_EV_IRQHandler+0x48>
		//clear flag
		// write to cr1
		I2Cx->CR1 |= 0x0000;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	601a      	str	r2, [r3, #0]
		Slave_Status(I2Cx, I2C_EV_STOP);
 8000c20:	2100      	movs	r1, #0
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff6c 	bl	8000b00 <Slave_Status>
	}



	//Handle for ADDR event
	if(flag1 && flag3){
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d012      	beq.n	8000c54 <I2C1_EV_IRQHandler+0x74>
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00f      	beq.n	8000c54 <I2C1_EV_IRQHandler+0x74>
		//check device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <I2C1_EV_IRQHandler+0x74>
			//master
		}else{
			//slave mode
			// clear by reading sr1 & sr2
			dummyRead = I2Cx->SR1;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	607b      	str	r3, [r7, #4]
			Slave_Status(I2Cx, I2C_EV_ADDR_MATCHED);
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff56 	bl	8000b00 <Slave_Status>
		}
	}


	flag3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5c:	60bb      	str	r3, [r7, #8]

	//handle TXE event
	if(flag1 && flag2 && flag3){
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00f      	beq.n	8000c84 <I2C1_EV_IRQHandler+0xa4>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00c      	beq.n	8000c84 <I2C1_EV_IRQHandler+0xa4>
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d009      	beq.n	8000c84 <I2C1_EV_IRQHandler+0xa4>
		//check device mode
				if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d103      	bne.n	8000c84 <I2C1_EV_IRQHandler+0xa4>
					//master
				}else{
					//slave mode

					Slave_Status(I2Cx, I2C_EV_DATA_REQ);
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff3e 	bl	8000b00 <Slave_Status>
				}
	}



	flag3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8c:	60bb      	str	r3, [r7, #8]

	//handle SB1
	if(flag1 && flag2 && flag3){
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00f      	beq.n	8000cb4 <I2C1_EV_IRQHandler+0xd4>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00c      	beq.n	8000cb4 <I2C1_EV_IRQHandler+0xd4>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d009      	beq.n	8000cb4 <I2C1_EV_IRQHandler+0xd4>
		//check device mode
				if(I2Cx->SR2 & (I2C_SR2_MSL)){
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d103      	bne.n	8000cb4 <I2C1_EV_IRQHandler+0xd4>
					//master
				}else{
					//slave mode

					Slave_Status(I2Cx, I2C_EV_DATA_RCV);
 8000cac:	2104      	movs	r1, #4
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff26 	bl	8000b00 <Slave_Status>
				}
	}


}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40005400 	.word	0x40005400

08000cc0 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){/* I2C1 error interrupt                             */
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)        			/* I2C2 event interrupt                             */
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)        			/* I2C2 error interrupt                             */
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <MCAL_RCC_GetSYS_CLCKFreq>:
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
const uint8_t APBPrescaler[8U] = {0 , 0 , 0 , 0 , 1 , 2 , 3 , 4};

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void){
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11){
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d006      	beq.n	8000d04 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d302      	bcc.n	8000d00 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d004      	beq.n	8000d08 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 8000cfe:	e005      	b.n	8000d0c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	case 0 :
		return HSI_RC_Clock;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 8000d02:	e003      	b.n	8000d0c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
			break;
	case 1 :
		return HSE_Clock;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000d06:	e001      	b.n	8000d0c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
			break;
	case 2 :
		return 16000000;
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000d0a:	e7ff      	b.n	8000d0c <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	007a1200 	.word	0x007a1200
 8000d1c:	00f42400 	.word	0x00f42400

08000d20 <MCAL_RCC_GetHCLK_CLCKFreq>:


//: AHB prescaler
//Set and cleared by software to control AHB clock division factor.
uint32_t MCAL_RCC_GetHCLK_CLCKFreq(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescaler[((RCC->CFGR >> 4) & 0xF)] );
 8000d24:	f7ff ffde 	bl	8000ce4 <MCAL_RCC_GetSYS_CLCKFreq>
 8000d28:	4601      	mov	r1, r0
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <MCAL_RCC_GetHCLK_CLCKFreq+0x20>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <MCAL_RCC_GetHCLK_CLCKFreq+0x24>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	080011cc 	.word	0x080011cc

08000d48 <MCAL_RCC_GetPCLK1_CLCKFreq>:



//Set and cleared by software to control the division factor of the APB Low speed clock (PCLK1).
uint32_t MCAL_RCC_GetPCLK1_CLCKFreq(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLK_CLCKFreq() >> APBPrescaler[((RCC->CFGR>>8) & 0b111) ] );
 8000d4c:	f7ff ffe8 	bl	8000d20 <MCAL_RCC_GetHCLK_CLCKFreq>
 8000d50:	4601      	mov	r1, r0
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <MCAL_RCC_GetPCLK1_CLCKFreq+0x20>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <MCAL_RCC_GetPCLK1_CLCKFreq+0x24>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	080011dc 	.word	0x080011dc

08000d70 <SPI1_IRQHandler>:
// -------------------------------------------------------------------------
// ======================= IRQ ================================
// -------------------------------------------------------------------------


void SPI1_IRQHandler(void){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

	struct SPI_Interrupt_source irq_src;

	irq_src.TXE = (((SPI1->SR)&(1<<1)) >> 1);
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <SPI1_IRQHandler+0x54>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	085b      	lsrs	r3, r3, #1
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	793b      	ldrb	r3, [r7, #4]
 8000d84:	f362 0300 	bfi	r3, r2, #0, #1
 8000d88:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (((SPI1->SR)&(1<<0)) >> 0);
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <SPI1_IRQHandler+0x54>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	793b      	ldrb	r3, [r7, #4]
 8000d96:	f362 0341 	bfi	r3, r2, #1, #1
 8000d9a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (((SPI1->SR)&(1<<4)) >> 4);
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <SPI1_IRQHandler+0x54>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	793b      	ldrb	r3, [r7, #4]
 8000daa:	f362 0382 	bfi	r3, r2, #2, #1
 8000dae:	713b      	strb	r3, [r7, #4]

	Gp_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SPI1_IRQHandler+0x58>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	7938      	ldrb	r0, [r7, #4]
 8000db8:	4798      	blx	r3

}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40013000 	.word	0x40013000
 8000dc8:	20000064 	.word	0x20000064

08000dcc <SPI2_IRQHandler>:



void SPI2_IRQHandler(void){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

	struct SPI_Interrupt_source irq_src;

	irq_src.TXE = (((SPI2->SR)&(1<<1)) >> 1);
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <SPI2_IRQHandler+0x54>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	793b      	ldrb	r3, [r7, #4]
 8000de0:	f362 0300 	bfi	r3, r2, #0, #1
 8000de4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = (((SPI2->SR)&(1<<0)) >> 0);
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SPI2_IRQHandler+0x54>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	793b      	ldrb	r3, [r7, #4]
 8000df2:	f362 0341 	bfi	r3, r2, #1, #1
 8000df6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (((SPI2->SR)&(1<<4)) >> 4);
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <SPI2_IRQHandler+0x54>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	f362 0382 	bfi	r3, r2, #2, #1
 8000e0a:	713b      	strb	r3, [r7, #4]

	Gp_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SPI2_IRQHandler+0x58>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	7938      	ldrb	r0, [r7, #4]
 8000e14:	4798      	blx	r3
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40003800 	.word	0x40003800
 8000e24:	20000064 	.word	0x20000064

08000e28 <USART1_IRQHandler>:




//ISR HANDELER
	void USART1_IRQHandler(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
		GP_UART_Config->P_IRQ_CallBack();
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <USART1_IRQHandler+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	4798      	blx	r3
	}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000006c 	.word	0x2000006c

08000e3c <USART2_IRQHandler>:

	void USART2_IRQHandler(void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
			GP_UART_Config->P_IRQ_CallBack();
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <USART2_IRQHandler+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4798      	blx	r3
		}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000006c 	.word	0x2000006c

08000e50 <USART3_IRQHandler>:

	void USART3_IRQHandler(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
			GP_UART_Config->P_IRQ_CallBack();
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <USART3_IRQHandler+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	4798      	blx	r3
		}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000006c 	.word	0x2000006c

08000e64 <GPIO_CRLH_PIN_POSITION>:
#include <STM32F103x8.h>
#include <STM32F103x8.h>
#include "../includes/GPIO_driver.h"


uint16_t GPIO_CRLH_PIN_POSITION(uint16_t pinNumber){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber){
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	2b80      	cmp	r3, #128	; 0x80
 8000e72:	d042      	beq.n	8000efa <GPIO_CRLH_PIN_POSITION+0x96>
 8000e74:	2b80      	cmp	r3, #128	; 0x80
 8000e76:	dc11      	bgt.n	8000e9c <GPIO_CRLH_PIN_POSITION+0x38>
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d036      	beq.n	8000eea <GPIO_CRLH_PIN_POSITION+0x86>
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	dc06      	bgt.n	8000e8e <GPIO_CRLH_PIN_POSITION+0x2a>
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d02e      	beq.n	8000ee2 <GPIO_CRLH_PIN_POSITION+0x7e>
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d02e      	beq.n	8000ee6 <GPIO_CRLH_PIN_POSITION+0x82>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d028      	beq.n	8000ede <GPIO_CRLH_PIN_POSITION+0x7a>
 8000e8c:	e047      	b.n	8000f1e <GPIO_CRLH_PIN_POSITION+0xba>
 8000e8e:	2b20      	cmp	r3, #32
 8000e90:	d02f      	beq.n	8000ef2 <GPIO_CRLH_PIN_POSITION+0x8e>
 8000e92:	2b40      	cmp	r3, #64	; 0x40
 8000e94:	d02f      	beq.n	8000ef6 <GPIO_CRLH_PIN_POSITION+0x92>
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	d029      	beq.n	8000eee <GPIO_CRLH_PIN_POSITION+0x8a>
 8000e9a:	e040      	b.n	8000f1e <GPIO_CRLH_PIN_POSITION+0xba>
 8000e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ea0:	d033      	beq.n	8000f0a <GPIO_CRLH_PIN_POSITION+0xa6>
 8000ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ea6:	dc09      	bgt.n	8000ebc <GPIO_CRLH_PIN_POSITION+0x58>
 8000ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eac:	d029      	beq.n	8000f02 <GPIO_CRLH_PIN_POSITION+0x9e>
 8000eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eb2:	d028      	beq.n	8000f06 <GPIO_CRLH_PIN_POSITION+0xa2>
 8000eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eb8:	d021      	beq.n	8000efe <GPIO_CRLH_PIN_POSITION+0x9a>
 8000eba:	e030      	b.n	8000f1e <GPIO_CRLH_PIN_POSITION+0xba>
 8000ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec0:	d027      	beq.n	8000f12 <GPIO_CRLH_PIN_POSITION+0xae>
 8000ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ec6:	dc03      	bgt.n	8000ed0 <GPIO_CRLH_PIN_POSITION+0x6c>
 8000ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ecc:	d01f      	beq.n	8000f0e <GPIO_CRLH_PIN_POSITION+0xaa>
 8000ece:	e026      	b.n	8000f1e <GPIO_CRLH_PIN_POSITION+0xba>
 8000ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ed4:	d01f      	beq.n	8000f16 <GPIO_CRLH_PIN_POSITION+0xb2>
 8000ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eda:	d01e      	beq.n	8000f1a <GPIO_CRLH_PIN_POSITION+0xb6>
 8000edc:	e01f      	b.n	8000f1e <GPIO_CRLH_PIN_POSITION+0xba>
	case GPIO_PIN_0 :
		return 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e01e      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	e01c      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	e01a      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000eea:	230c      	movs	r3, #12
 8000eec:	e018      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000eee:	2310      	movs	r3, #16
 8000ef0:	e016      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000ef2:	2314      	movs	r3, #20
 8000ef4:	e014      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000ef6:	2318      	movs	r3, #24
 8000ef8:	e012      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000efa:	231c      	movs	r3, #28
 8000efc:	e010      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
	case GPIO_PIN_8 :
		return 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e00e      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000f02:	2304      	movs	r3, #4
 8000f04:	e00c      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000f06:	2308      	movs	r3, #8
 8000f08:	e00a      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	e008      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000f0e:	2310      	movs	r3, #16
 8000f10:	e006      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000f12:	2314      	movs	r3, #20
 8000f14:	e004      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000f16:	2318      	movs	r3, #24
 8000f18:	e002      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000f1a:	231c      	movs	r3, #28
 8000f1c:	e000      	b.n	8000f20 <GPIO_CRLH_PIN_POSITION+0xbc>

	}

	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <MCAL_GPIO_init>:
 * @retval						-none
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_GPIO_init(GPIO_typedefConfig* GPIOx, GPIO_pinConfig* pinConfig){
 8000f2a:	b590      	push	{r4, r7, lr}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]

	//port configuration register low (pins from 0 >> 7 )	GPIOx_CRL
	//port configuration register high (pins from 8 >> 15 )	GPIOx_CRH
	volatile uint32_t * configRegister = NULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Conf = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]

	configRegister = (pinConfig->GPIO_PinNum)<GPIO_PIN_8 ? &GPIOx->CRL : &GPIOx->CRH;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	d801      	bhi.n	8000f4a <MCAL_GPIO_init+0x20>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	e001      	b.n	8000f4e <MCAL_GPIO_init+0x24>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] and MODEx[1:0]
	(*configRegister) &= ~(0xf<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff84 	bl	8000e64 <GPIO_CRLH_PIN_POSITION>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	230f      	movs	r3, #15
 8000f62:	4093      	lsls	r3, r2
 8000f64:	43da      	mvns	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(pinConfig->GPIO_PinMode == OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == OUTPUT_PUSH_PULL_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_PUSH_PULL_MODE){
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	789b      	ldrb	r3, [r3, #2]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	d00e      	beq.n	8000f98 <MCAL_GPIO_init+0x6e>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	789b      	ldrb	r3, [r3, #2]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d009      	beq.n	8000f98 <MCAL_GPIO_init+0x6e>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b07      	cmp	r3, #7
 8000f8c:	d004      	beq.n	8000f98 <MCAL_GPIO_init+0x6e>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	789b      	ldrb	r3, [r3, #2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b06      	cmp	r3, #6
 8000f96:	d110      	bne.n	8000fba <MCAL_GPIO_init+0x90>

		//configure pin CNF and MODE
		Pin_Conf = (((pinConfig->GPIO_PinMode-4) << 2) | ((pinConfig->GPIO_Output_Speed )& 0x0f));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	789b      	ldrb	r3, [r3, #2]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	78db      	ldrb	r3, [r3, #3]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e039      	b.n	800102e <MCAL_GPIO_init+0x104>

	}else{	//if pin is input
		if (pinConfig -> GPIO_PinMode == INPUT_ANLOG_MODE || pinConfig->GPIO_PinMode == INPUT_FLOATING_MODE){
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	789b      	ldrb	r3, [r3, #2]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d004      	beq.n	8000fce <MCAL_GPIO_init+0xa4>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	789b      	ldrb	r3, [r3, #2]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <MCAL_GPIO_init+0xb6>
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x00) & 0x0f;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e026      	b.n	800102e <MCAL_GPIO_init+0x104>
		}else if (pinConfig -> GPIO_PinMode == AF_INPUT_FLOATING_MODE){ //Input Floating
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	789b      	ldrb	r3, [r3, #2]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d102      	bne.n	8000ff0 <MCAL_GPIO_init+0xc6>
			Pin_Conf = ((INPUT_FLOATING_MODE<<2) | 0x00) & 0x0f;
 8000fea:	2304      	movs	r3, #4
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e01e      	b.n	800102e <MCAL_GPIO_init+0x104>
		}else{		//Input PU PD
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x00) & 0x0f;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	73fb      	strb	r3, [r7, #15]

			if(pinConfig->GPIO_PinMode == INPUT_PULL_UP_MODE){
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	789b      	ldrb	r3, [r3, #2]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d108      	bne.n	800101c <MCAL_GPIO_init+0xf2>
				GPIOx->ODR |= pinConfig->GPIO_PinNum;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	e008      	b.n	800102e <MCAL_GPIO_init+0x104>
			}else{
				GPIOx->ODR &= ~(pinConfig->GPIO_PinNum);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	401a      	ands	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on the register
	(*configRegister) |= (Pin_Conf<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
 800102e:	7bfc      	ldrb	r4, [r7, #15]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff14 	bl	8000e64 <GPIO_CRLH_PIN_POSITION>
 800103c:	4603      	mov	r3, r0
 800103e:	fa04 f203 	lsl.w	r2, r4, r3
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}

08001054 <clock_init>:
//	MCAL_GPIO_Write_Pin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
//
//#endif
//}

void clock_init(void){
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	//	Bit 2 IOPAEN: IO port A clock enable
	//	Set and cleared by software.
	//	0: IO port A clock disabled
	//	1: IO port A clock enabled

	RCC_GPIOA_CLK_EN();
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <clock_init+0x3c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <clock_init+0x3c>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]

	//	Bit 3 IOPBEN: IO port B clock enable
	//	Set and cleared by software.
	//	0: IO port B clock disabled
	//	1: IO port B clock enabled
	RCC_GPIOB_CLK_EN();
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <clock_init+0x3c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <clock_init+0x3c>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <clock_init+0x3c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <clock_init+0x3c>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]

	RCC_USART1_CLK_Enable();
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <clock_init+0x3c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a03      	ldr	r2, [pc, #12]	; (8001090 <clock_init+0x3c>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6193      	str	r3, [r2, #24]



}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000

08001094 <main>:
//#endif
//}


int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

	clock_init();
 800109a:	f7ff ffdb 	bl	8001054 <clock_init>

	//	MCAL_SPI_GPIO_Set_Pins(SPI1);


	//Test case 1
	unsigned char ch1[] = {0x1 , 0x2, 0x3, 0x4, 0x5, 0x6 , 0x7};
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <main+0x78>)
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a8:	6018      	str	r0, [r3, #0]
 80010aa:	3304      	adds	r3, #4
 80010ac:	8019      	strh	r1, [r3, #0]
 80010ae:	3302      	adds	r3, #2
 80010b0:	0c0a      	lsrs	r2, r1, #16
 80010b2:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 80010be:	f7ff f857 	bl	8000170 <EEPROM_Init>
	EEPROM_WRITE_NBytes(0xAF, ch1, 7);		//write
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2207      	movs	r2, #7
 80010c8:	4619      	mov	r1, r3
 80010ca:	20af      	movs	r0, #175	; 0xaf
 80010cc:	f7ff f870 	bl	80001b0 <EEPROM_WRITE_NBytes>
	EEPROM_READ_NBytes(0xAF, ch2, 7);		//read
 80010d0:	463b      	mov	r3, r7
 80010d2:	2207      	movs	r2, #7
 80010d4:	4619      	mov	r1, r3
 80010d6:	20af      	movs	r0, #175	; 0xaf
 80010d8:	f7ff f8b8 	bl	800024c <EEPROM_READ_NBytes>

	//Test case 2
	ch1[0] = 0xA;
 80010dc:	230a      	movs	r3, #10
 80010de:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 80010e0:	230b      	movs	r3, #11
 80010e2:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 80010e4:	230c      	movs	r3, #12
 80010e6:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 80010e8:	230d      	movs	r3, #13
 80010ea:	72fb      	strb	r3, [r7, #11]
	EEPROM_WRITE_NBytes(0xFFF, ch1, 4);		//write
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	2204      	movs	r2, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010f8:	f7ff f85a 	bl	80001b0 <EEPROM_WRITE_NBytes>
	EEPROM_READ_NBytes(0xFFF, ch2, 4);		//read
 80010fc:	463b      	mov	r3, r7
 80010fe:	2204      	movs	r2, #4
 8001100:	4619      	mov	r1, r3
 8001102:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001106:	f7ff f8a1 	bl	800024c <EEPROM_READ_NBytes>

	while(1){
 800110a:	e7fe      	b.n	800110a <main+0x76>
 800110c:	080011c4 	.word	0x080011c4

08001110 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001112:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001114:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <LoopForever+0x6>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	; (8001150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <LoopForever+0xe>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	; (800115c <LoopForever+0x16>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800113e:	f000 f811 	bl	8001164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001142:	f7ff ffa7 	bl	8001094 <main>

08001146 <LoopForever>:

LoopForever:
    b LoopForever
 8001146:	e7fe      	b.n	8001146 <LoopForever>
  ldr   r0, =_estack
 8001148:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001154:	080011ec 	.word	0x080011ec
  ldr r2, =_sbss
 8001158:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800115c:	200000ac 	.word	0x200000ac

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>
	...

08001164 <__libc_init_array>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	2500      	movs	r5, #0
 8001168:	4e0c      	ldr	r6, [pc, #48]	; (800119c <__libc_init_array+0x38>)
 800116a:	4c0d      	ldr	r4, [pc, #52]	; (80011a0 <__libc_init_array+0x3c>)
 800116c:	1ba4      	subs	r4, r4, r6
 800116e:	10a4      	asrs	r4, r4, #2
 8001170:	42a5      	cmp	r5, r4
 8001172:	d109      	bne.n	8001188 <__libc_init_array+0x24>
 8001174:	f000 f81a 	bl	80011ac <_init>
 8001178:	2500      	movs	r5, #0
 800117a:	4e0a      	ldr	r6, [pc, #40]	; (80011a4 <__libc_init_array+0x40>)
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <__libc_init_array+0x44>)
 800117e:	1ba4      	subs	r4, r4, r6
 8001180:	10a4      	asrs	r4, r4, #2
 8001182:	42a5      	cmp	r5, r4
 8001184:	d105      	bne.n	8001192 <__libc_init_array+0x2e>
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800118c:	4798      	blx	r3
 800118e:	3501      	adds	r5, #1
 8001190:	e7ee      	b.n	8001170 <__libc_init_array+0xc>
 8001192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001196:	4798      	blx	r3
 8001198:	3501      	adds	r5, #1
 800119a:	e7f2      	b.n	8001182 <__libc_init_array+0x1e>
 800119c:	080011e4 	.word	0x080011e4
 80011a0:	080011e4 	.word	0x080011e4
 80011a4:	080011e4 	.word	0x080011e4
 80011a8:	080011e8 	.word	0x080011e8

080011ac <_init>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr

080011b8 <_fini>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr
