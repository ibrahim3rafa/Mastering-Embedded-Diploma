
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b30  08000b30  00010b38  2**0
                  CONTENTS
  4 .ARM          00000000  08000b30  08000b30  00010b38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b30  08000b38  00010b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b30  08000b30  00010b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b34  08000b34  00010b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000b38  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000b38  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b38  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040d6  00000000  00000000  00010b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a73  00000000  00000000  00014c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000ab0  00000000  00000000  000156aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d8  00000000  00000000  00016160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00016338  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e2b  00000000  00000000  000164b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002128  00000000  00000000  000172e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a0a2  00000000  00000000  0001940b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000234ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005b8  00000000  00000000  00023528  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b00 	.word	0x08000b00

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b00 	.word	0x08000b00

08000170 <EXTI0_IRQHandler>:




/* EXTI Line0 interrupt                             */
void EXTI0_IRQHandler(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI0); 		//Clear Pending register
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[0]() ;			//Call function in application layer
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:


/* EXTI Line1interrupt                             */
void EXTI1_IRQHandler(){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI1); 		//Clear Pending register
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[1]() ;			//Call function in application layer
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:

/* EXTI Line2 interrupt                             */
void EXTI2_IRQHandler(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI2); 		//Clear Pending register
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[2]() ;			//Call function in application layer
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:

/* EXTI Line3 interrupt                             */
void EXTI3_IRQHandler(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI3); 		//Clear Pending register
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[3]() ;			//Call function in application layer
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI4_IRQHandler>:

/* EXTI Line4 interrupt                             */
void EXTI4_IRQHandler(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI4); 		//Clear Pending register
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[4]() ;			//Call function in application layer
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000020 	.word	0x20000020

08000224 <EXTI9_5_IRQHandler>:

/* EXTI Line[9:5] interrupts                        */
void EXTI9_5_IRQHandler(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	if(EXTI->PR & (1<<5)){
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
	EXTI->PR |= (1<<EXTI5); 		//Clear Pending register
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[5]() ;			//Call function in application layer
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<6)){
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
	EXTI->PR |= (1<<EXTI6); 		//Clear Pending register
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[6]() ;			//Call function in application layer
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<7)){
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
	EXTI->PR |= (1<<EXTI7); 		//Clear Pending register
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[7]() ;			//Call function in application layer
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<8)){
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
	EXTI->PR |= (1<<EXTI8); 		//Clear Pending register
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[8]() ;			//Call function in application layer
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<9)){
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
	EXTI->PR |= (1<<EXTI9); 		//Clear Pending register
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[9]() ;			//Call function in application layer
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI15_10_IRQHandler>:
/* EXTI Line[15:10] interrupts                      */
void EXTI15_10_IRQHandler(){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	if(EXTI->PR & (1<<10)){
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
	EXTI->PR |= (1<<EXTI10); 		//Clear Pending register
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[10]() ;			//Call function in application layer
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<11)){
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
	EXTI->PR |= (1<<EXTI11); 		//Clear Pending register
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[11]() ;			//Call function in application layer
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<12)){
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
	EXTI->PR |= (1<<EXTI12); 		//Clear Pending register
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[12]() ;			//Call function in application layer
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<13)){
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
	EXTI->PR |= (1<<EXTI13); 		//Clear Pending register
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[13]() ;			//Call function in application layer
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	}

	if(EXTI->PR & (1<<14)){
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
	EXTI->PR |= (1<<EXTI14); 		//Clear Pending register
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[14]() ;			//Call function in application layer
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	}
	if(EXTI->PR & (1<<15)){
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
	EXTI->PR |= (1<<EXTI15); 		//Clear Pending register
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
	GP_EXTI_CallBack[15]() ;			//Call function in application layer
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
	}
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000020 	.word	0x20000020

08000390 <MCAL_RCC_GetSYS_CLCKFreq>:
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
const uint8_t APBPrescaler[8U] = {0 , 0 , 0 , 0 , 1 , 2 , 3 , 4};

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void){
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >> 2) & 0b11){
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	f003 0303 	and.w	r3, r3, #3
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d006      	beq.n	80003b0 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d302      	bcc.n	80003ac <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d004      	beq.n	80003b4 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80003aa:	e005      	b.n	80003b8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	case 0 :
		return HSI_RC_Clock;
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80003ae:	e003      	b.n	80003b8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
			break;
	case 1 :
		return HSE_Clock;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80003b2:	e001      	b.n	80003b8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
			break;
	case 2 :
		return 16000000;
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80003b6:	e7ff      	b.n	80003b8 <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break;
	}
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000
 80003c4:	007a1200 	.word	0x007a1200
 80003c8:	00f42400 	.word	0x00f42400

080003cc <MCAL_RCC_GetHCLK_CLCKFreq>:


//: AHB prescaler
//Set and cleared by software to control AHB clock division factor.
uint32_t MCAL_RCC_GetHCLK_CLCKFreq(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescaler[((RCC->CFGR >> 4) & 0xF)] );
 80003d0:	f7ff ffde 	bl	8000390 <MCAL_RCC_GetSYS_CLCKFreq>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <MCAL_RCC_GetHCLK_CLCKFreq+0x20>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	091b      	lsrs	r3, r3, #4
 80003dc:	f003 030f 	and.w	r3, r3, #15
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <MCAL_RCC_GetHCLK_CLCKFreq+0x24>)
 80003e2:	5cd3      	ldrb	r3, [r2, r3]
 80003e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	08000b18 	.word	0x08000b18

080003f4 <MCAL_RCC_GetPCLK1_CLCKFreq>:



//Set and cleared by software to control the division factor of the APB Low speed clock (PCLK1).
uint32_t MCAL_RCC_GetPCLK1_CLCKFreq(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLK_CLCKFreq() >> APBPrescaler[((RCC->CFGR>>8) & 0b111) ] );
 80003f8:	f7ff ffe8 	bl	80003cc <MCAL_RCC_GetHCLK_CLCKFreq>
 80003fc:	4601      	mov	r1, r0
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MCAL_RCC_GetPCLK1_CLCKFreq+0x20>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	0a1b      	lsrs	r3, r3, #8
 8000404:	f003 0307 	and.w	r3, r3, #7
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <MCAL_RCC_GetPCLK1_CLCKFreq+0x24>)
 800040a:	5cd3      	ldrb	r3, [r2, r3]
 800040c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000410:	4618      	mov	r0, r3
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	08000b28 	.word	0x08000b28

0800041c <MCAL_RCC_GetPCLK2_CLCKFreq>:



//PPRE2[2:0]: APB high-speed prescaler (APB2)
//Set and cleared by software to control the division factor of the APB High speed clock (PCLK2).
uint32_t MCAL_RCC_GetPCLK2_CLCKFreq(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GetHCLK_CLCKFreq() >> APBPrescaler[((RCC->CFGR>>11) & 0b111) ] );
 8000420:	f7ff ffd4 	bl	80003cc <MCAL_RCC_GetHCLK_CLCKFreq>
 8000424:	4601      	mov	r1, r0
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MCAL_RCC_GetPCLK2_CLCKFreq+0x20>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	0adb      	lsrs	r3, r3, #11
 800042c:	f003 0307 	and.w	r3, r3, #7
 8000430:	4a03      	ldr	r2, [pc, #12]	; (8000440 <MCAL_RCC_GetPCLK2_CLCKFreq+0x24>)
 8000432:	5cd3      	ldrb	r3, [r2, r3]
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000438:	4618      	mov	r0, r3
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	08000b28 	.word	0x08000b28

08000444 <MCAL_UART_Init>:
 * @param [in] 			- UARTCfg: All the UART configurations
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_typedef* USARTx, UART_Config * UARTCfg){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	GP_UART_Config = UARTCfg;    //Backup
 800044e:	4a5c      	ldr	r2, [pc, #368]	; (80005c0 <MCAL_UART_Init+0x17c>)
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	6013      	str	r3, [r2, #0]

	uint32_t BRR,PCLCK;

	//Enable clock
	if(USARTx == USART1){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a5b      	ldr	r2, [pc, #364]	; (80005c4 <MCAL_UART_Init+0x180>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_Enable();
 800045c:	4b5a      	ldr	r3, [pc, #360]	; (80005c8 <MCAL_UART_Init+0x184>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a59      	ldr	r2, [pc, #356]	; (80005c8 <MCAL_UART_Init+0x184>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	e014      	b.n	8000494 <MCAL_UART_Init+0x50>
	}else if (USARTx == USART2){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a57      	ldr	r2, [pc, #348]	; (80005cc <MCAL_UART_Init+0x188>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_Enable();
 8000472:	4b55      	ldr	r3, [pc, #340]	; (80005c8 <MCAL_UART_Init+0x184>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a54      	ldr	r2, [pc, #336]	; (80005c8 <MCAL_UART_Init+0x184>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	e009      	b.n	8000494 <MCAL_UART_Init+0x50>
	}else if(USARTx == USART3){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a53      	ldr	r2, [pc, #332]	; (80005d0 <MCAL_UART_Init+0x18c>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_Enable();
 8000488:	4b4f      	ldr	r3, [pc, #316]	; (80005c8 <MCAL_UART_Init+0x184>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	4a4e      	ldr	r2, [pc, #312]	; (80005c8 <MCAL_UART_Init+0x184>)
 800048e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000492:	61d3      	str	r3, [r2, #28]
	}

	//Enable usart UE bit in USART_CR1
	USARTx->CR1 |= (1<<13);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	60da      	str	r2, [r3, #12]

	//programin M Bit in USART_CR1
	USARTx->CR1 |= UARTCfg->Word_Lenght;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	683a      	ldr	r2, [r7, #0]
 80004a6:	7852      	ldrb	r2, [r2, #1]
 80004a8:	431a      	orrs	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	60da      	str	r2, [r3, #12]

	//stop Bits
	USARTx->CR2 |= UARTCfg->StopBits;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	691b      	ldr	r3, [r3, #16]
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	7892      	ldrb	r2, [r2, #2]
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	611a      	str	r2, [r3, #16]

	//select desired buadrate
	if(USARTx == USART1){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a41      	ldr	r2, [pc, #260]	; (80005c4 <MCAL_UART_Init+0x180>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d103      	bne.n	80004cc <MCAL_UART_Init+0x88>
		PCLCK = MCAL_RCC_GetPCLK2_CLCKFreq();
 80004c4:	f7ff ffaa 	bl	800041c <MCAL_RCC_GetPCLK2_CLCKFreq>
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	e006      	b.n	80004da <MCAL_UART_Init+0x96>
	}else if (USARTx == USART2){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a3f      	ldr	r2, [pc, #252]	; (80005cc <MCAL_UART_Init+0x188>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d102      	bne.n	80004da <MCAL_UART_Init+0x96>
		PCLCK = MCAL_RCC_GetPCLK1_CLCKFreq();
 80004d4:	f7ff ff8e 	bl	80003f4 <MCAL_RCC_GetPCLK1_CLCKFreq>
 80004d8:	60f8      	str	r0, [r7, #12]
	}
	BRR = UART_BRR_Register(PCLCK,UARTCfg->BuadRate);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	0119      	lsls	r1, r3, #4
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	4613      	mov	r3, r2
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	4413      	add	r3, r2
 80004f0:	009a      	lsls	r2, r3, #2
 80004f2:	441a      	add	r2, r3
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	68f8      	ldr	r0, [r7, #12]
 8000506:	fbb0 f3f3 	udiv	r3, r0, r3
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	fb00 f303 	mul.w	r3, r0, r3
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MCAL_UART_Init+0x190>)
 8000516:	fba2 2303 	umull	r2, r3, r2, r3
 800051a:	095b      	lsrs	r3, r3, #5
 800051c:	f003 030f 	and.w	r3, r3, #15
 8000520:	430b      	orrs	r3, r1
 8000522:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	609a      	str	r2, [r3, #8]

	//select desired stop bit
	USARTx->CR2 |= UARTCfg->StopBits;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	691b      	ldr	r3, [r3, #16]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	7892      	ldrb	r2, [r2, #2]
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	611a      	str	r2, [r3, #16]

	//Select Parity bit
	USARTx->CR1 |= UARTCfg->Parity;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	7a12      	ldrb	r2, [r2, #8]
 8000540:	431a      	orrs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	60da      	str	r2, [r3, #12]

	//Select HWFlow CTRl
	USARTx->CR3 |= UARTCfg->HWFlowCtl;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	7a52      	ldrb	r2, [r2, #9]
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	615a      	str	r2, [r3, #20]

	//select TX/Rx MOde
	USARTx->CR1 |= UARTCfg->USART_Mode;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60da      	str	r2, [r3, #12]

	//select between interrupt and polling
	if(UARTCfg->IRQEnable != UART_IRQ_Enable_NONE){
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	7a9b      	ldrb	r3, [r3, #10]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d026      	beq.n	80005b8 <MCAL_UART_Init+0x174>

		USARTx->CR1 |= UARTCfg->IRQEnable;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7a92      	ldrb	r2, [r2, #10]
 8000572:	431a      	orrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60da      	str	r2, [r3, #12]

		if(USARTx == USART1){
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <MCAL_UART_Init+0x180>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d106      	bne.n	800058e <MCAL_UART_Init+0x14a>
			NVIC_USART1_IRQ_Enable;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MCAL_UART_Init+0x194>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <MCAL_UART_Init+0x194>)
 8000586:	f043 0320 	orr.w	r3, r3, #32
 800058a:	6013      	str	r3, [r2, #0]
			NVIC_USART2_IRQ_Enable;
		}else if(USARTx == USART3){
			NVIC_USART3_IRQ_Enable;
		}
	}
}
 800058c:	e014      	b.n	80005b8 <MCAL_UART_Init+0x174>
		}else if (USARTx == USART2){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <MCAL_UART_Init+0x188>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <MCAL_UART_Init+0x160>
			NVIC_USART2_IRQ_Enable;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <MCAL_UART_Init+0x194>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <MCAL_UART_Init+0x194>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	e009      	b.n	80005b8 <MCAL_UART_Init+0x174>
		}else if(USARTx == USART3){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <MCAL_UART_Init+0x18c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d105      	bne.n	80005b8 <MCAL_UART_Init+0x174>
			NVIC_USART3_IRQ_Enable;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <MCAL_UART_Init+0x194>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <MCAL_UART_Init+0x194>)
 80005b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000001c 	.word	0x2000001c
 80005c4:	40013800 	.word	0x40013800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40004400 	.word	0x40004400
 80005d0:	40004800 	.word	0x40004800
 80005d4:	51eb851f 	.word	0x51eb851f
 80005d8:	e000e104 	.word	0xe000e104

080005dc <MCAL_UART_GPIO_SetPins>:
 * @param [in] 			- USARTx: where x can be (1..3) depending on the device used
 * @retval 				- None
 * Note					- should enable the corresponding AFIO & GPIO in RCC clock
 * 						  based on the recommended settings in data sheet
 */
void MCAL_UART_GPIO_SetPins(USART_typedef* USARTx){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	GPIO_pinConfig PINCfg;

	if(USARTx == USART1){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <MCAL_UART_GPIO_SetPins+0xb8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d118      	bne.n	800061e <MCAL_UART_GPIO_SetPins+0x42>

		//PA9-->Tx
		PINCfg.GPIO_PinNum = GPIO_PIN_9;
 80005ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f0:	81bb      	strh	r3, [r7, #12]
		PINCfg.GPIO_PinMode = AF_OUTPUT_PUSH_PULL_MODE;
 80005f2:	2306      	movs	r3, #6
 80005f4:	73bb      	strb	r3, [r7, #14]
		PINCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 80005f6:	2301      	movs	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA, &PINCfg);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	4825      	ldr	r0, [pc, #148]	; (8000698 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000602:	f000 f944 	bl	800088e <MCAL_GPIO_init>

		//PA10--->RX
		PINCfg.GPIO_PinNum = GPIO_PIN_10;
 8000606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060a:	81bb      	strh	r3, [r7, #12]
		PINCfg.GPIO_PinMode = AF_INPUT_FLOATING_MODE;
 800060c:	2308      	movs	r3, #8
 800060e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOA, &PINCfg);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4820      	ldr	r0, [pc, #128]	; (8000698 <MCAL_UART_GPIO_SetPins+0xbc>)
 8000618:	f000 f939 	bl	800088e <MCAL_GPIO_init>
			PINCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
			MCAL_GPIO_init(GPIOB, &PINCfg);
		}

	}
}
 800061c:	e036      	b.n	800068c <MCAL_UART_GPIO_SetPins+0xb0>
	}else if (USARTx == USART2){
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <MCAL_UART_GPIO_SetPins+0xc0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d116      	bne.n	8000654 <MCAL_UART_GPIO_SetPins+0x78>
		PINCfg.GPIO_PinNum = GPIO_PIN_2;
 8000626:	2304      	movs	r3, #4
 8000628:	81bb      	strh	r3, [r7, #12]
		PINCfg.GPIO_PinMode = AF_OUTPUT_PUSH_PULL_MODE;
 800062a:	2306      	movs	r3, #6
 800062c:	73bb      	strb	r3, [r7, #14]
		PINCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800062e:	2301      	movs	r3, #1
 8000630:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOA, &PINCfg);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4619      	mov	r1, r3
 8000638:	4817      	ldr	r0, [pc, #92]	; (8000698 <MCAL_UART_GPIO_SetPins+0xbc>)
 800063a:	f000 f928 	bl	800088e <MCAL_GPIO_init>
		PINCfg.GPIO_PinNum = GPIO_PIN_3;
 800063e:	2308      	movs	r3, #8
 8000640:	81bb      	strh	r3, [r7, #12]
		PINCfg.GPIO_PinMode = AF_INPUT_FLOATING_MODE;
 8000642:	2308      	movs	r3, #8
 8000644:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOA, &PINCfg);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	4812      	ldr	r0, [pc, #72]	; (8000698 <MCAL_UART_GPIO_SetPins+0xbc>)
 800064e:	f000 f91e 	bl	800088e <MCAL_GPIO_init>
}
 8000652:	e01b      	b.n	800068c <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(USARTx == USART3){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MCAL_UART_GPIO_SetPins+0xc4>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d117      	bne.n	800068c <MCAL_UART_GPIO_SetPins+0xb0>
		PINCfg.GPIO_PinNum = GPIO_PIN_10;
 800065c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000660:	81bb      	strh	r3, [r7, #12]
		PINCfg.GPIO_PinMode = AF_OUTPUT_PUSH_PULL_MODE;
 8000662:	2306      	movs	r3, #6
 8000664:	73bb      	strb	r3, [r7, #14]
		PINCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000666:	2301      	movs	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &PINCfg);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000672:	f000 f90c 	bl	800088e <MCAL_GPIO_init>
		PINCfg.GPIO_PinNum = GPIO_PIN_11;
 8000676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800067a:	81bb      	strh	r3, [r7, #12]
		PINCfg.GPIO_PinMode = AF_INPUT_FLOATING_MODE;
 800067c:	2308      	movs	r3, #8
 800067e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init(GPIOB, &PINCfg);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4807      	ldr	r0, [pc, #28]	; (80006a4 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000688:	f000 f901 	bl	800088e <MCAL_GPIO_init>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40013800 	.word	0x40013800
 8000698:	40010800 	.word	0x40010800
 800069c:	40004400 	.word	0x40004400
 80006a0:	40004800 	.word	0x40004800
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <MCAL_UART_SendDate>:
 * Note					- When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
							the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
							because it is replaced by the parity.
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */
void MCAL_UART_SendDate(USART_typedef* USARTx, uint16_t* pTXBuffer, enum polling_Mechanism PollingState){
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	71fb      	strb	r3, [r7, #7]

	//wait till TXE is set
	if(PollingState == Enable){
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d106      	bne.n	80006ca <MCAL_UART_SendDate+0x22>
		while(!(USARTx->SR & 1<<7));
 80006bc:	bf00      	nop
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <MCAL_UART_SendDate+0x16>
	}

	//check the word lenght
	if(GP_UART_Config ->Word_Lenght == UART_Word_Lenght_8B){
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MCAL_UART_SendDate+0x50>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	785b      	ldrb	r3, [r3, #1]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d105      	bne.n	80006e0 <MCAL_UART_SendDate+0x38>
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF);
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF);
	}
}
 80006de:	e005      	b.n	80006ec <MCAL_UART_SendDate+0x44>
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	605a      	str	r2, [r3, #4]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000001c 	.word	0x2000001c

080006fc <MCAL_UART_RecieveDate>:
							the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
							because it is replaced by the parity.
							When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */

void MCAL_UART_RecieveDate(USART_typedef* USARTx, uint16_t* pTXBuffer, enum polling_Mechanism PollingState){
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	71fb      	strb	r3, [r7, #7]

	//wait till recieve not empty RXNE
	if(PollingState == Enable){
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d106      	bne.n	800071e <MCAL_UART_RecieveDate+0x22>
		while(!(USARTx->SR & (1<<5)));
 8000710:	bf00      	nop
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f003 0320 	and.w	r3, r3, #32
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f9      	beq.n	8000712 <MCAL_UART_RecieveDate+0x16>
	}

	//check the word lenght
	if(GP_UART_Config->Word_Lenght == UART_Word_Lenght_8B){
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MCAL_UART_RecieveDate+0x8c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d115      	bne.n	8000754 <MCAL_UART_RecieveDate+0x58>

		if (GP_UART_Config->Parity == UART_Parity_NONE){
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MCAL_UART_RecieveDate+0x8c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	7a1b      	ldrb	r3, [r3, #8]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d107      	bne.n	8000742 <MCAL_UART_RecieveDate+0x46>
			*pTXBuffer = (USARTx->DR & (uint8_t)0xFF);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	b29b      	uxth	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	b29a      	uxth	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	801a      	strh	r2, [r3, #0]
		}else{
			*pTXBuffer = (USARTx->DR & (uint8_t)0xFF);
		}

	}
}
 8000740:	e01d      	b.n	800077e <MCAL_UART_RecieveDate+0x82>
			*pTXBuffer = (USARTx->DR & (uint8_t)0x7F);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	b29b      	uxth	r3, r3
 8000748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800074c:	b29a      	uxth	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	801a      	strh	r2, [r3, #0]
}
 8000752:	e014      	b.n	800077e <MCAL_UART_RecieveDate+0x82>
		if (GP_UART_Config->Parity == UART_Parity_NONE){
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MCAL_UART_RecieveDate+0x8c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7a1b      	ldrb	r3, [r3, #8]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d108      	bne.n	8000770 <MCAL_UART_RecieveDate+0x74>
			*pTXBuffer = (USARTx->DR & (uint16_t)0x1FF);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	b29b      	uxth	r3, r3
 8000764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000768:	b29a      	uxth	r2, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	801a      	strh	r2, [r3, #0]
}
 800076e:	e006      	b.n	800077e <MCAL_UART_RecieveDate+0x82>
			*pTXBuffer = (USARTx->DR & (uint8_t)0xFF);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	b29a      	uxth	r2, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	801a      	strh	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	2000001c 	.word	0x2000001c

0800078c <USART1_IRQHandler>:




//ISR HANDELER
	void USART1_IRQHandler(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
		GP_UART_Config->P_IRQ_CallBack();
 8000790:	4b02      	ldr	r3, [pc, #8]	; (800079c <USART1_IRQHandler+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4798      	blx	r3
	}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000001c 	.word	0x2000001c

080007a0 <USART2_IRQHandler>:

	void USART2_IRQHandler(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
			GP_UART_Config->P_IRQ_CallBack();
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <USART2_IRQHandler+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4798      	blx	r3
		}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000001c 	.word	0x2000001c

080007b4 <USART3_IRQHandler>:

	void USART3_IRQHandler(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
			GP_UART_Config->P_IRQ_CallBack();
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <USART3_IRQHandler+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	4798      	blx	r3
		}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000001c 	.word	0x2000001c

080007c8 <GPIO_CRLH_PIN_POSITION>:
#include "../includes/GPIO_driver.h"

#include "../includes/STM32F103x6.h"
#include "../includes/STM32F103x6.h"

uint16_t GPIO_CRLH_PIN_POSITION(uint16_t pinNumber){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber){
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	2b80      	cmp	r3, #128	; 0x80
 80007d6:	d042      	beq.n	800085e <GPIO_CRLH_PIN_POSITION+0x96>
 80007d8:	2b80      	cmp	r3, #128	; 0x80
 80007da:	dc11      	bgt.n	8000800 <GPIO_CRLH_PIN_POSITION+0x38>
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d036      	beq.n	800084e <GPIO_CRLH_PIN_POSITION+0x86>
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	dc06      	bgt.n	80007f2 <GPIO_CRLH_PIN_POSITION+0x2a>
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d02e      	beq.n	8000846 <GPIO_CRLH_PIN_POSITION+0x7e>
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d02e      	beq.n	800084a <GPIO_CRLH_PIN_POSITION+0x82>
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d028      	beq.n	8000842 <GPIO_CRLH_PIN_POSITION+0x7a>
 80007f0:	e047      	b.n	8000882 <GPIO_CRLH_PIN_POSITION+0xba>
 80007f2:	2b20      	cmp	r3, #32
 80007f4:	d02f      	beq.n	8000856 <GPIO_CRLH_PIN_POSITION+0x8e>
 80007f6:	2b40      	cmp	r3, #64	; 0x40
 80007f8:	d02f      	beq.n	800085a <GPIO_CRLH_PIN_POSITION+0x92>
 80007fa:	2b10      	cmp	r3, #16
 80007fc:	d029      	beq.n	8000852 <GPIO_CRLH_PIN_POSITION+0x8a>
 80007fe:	e040      	b.n	8000882 <GPIO_CRLH_PIN_POSITION+0xba>
 8000800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000804:	d033      	beq.n	800086e <GPIO_CRLH_PIN_POSITION+0xa6>
 8000806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080a:	dc09      	bgt.n	8000820 <GPIO_CRLH_PIN_POSITION+0x58>
 800080c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000810:	d029      	beq.n	8000866 <GPIO_CRLH_PIN_POSITION+0x9e>
 8000812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000816:	d028      	beq.n	800086a <GPIO_CRLH_PIN_POSITION+0xa2>
 8000818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800081c:	d021      	beq.n	8000862 <GPIO_CRLH_PIN_POSITION+0x9a>
 800081e:	e030      	b.n	8000882 <GPIO_CRLH_PIN_POSITION+0xba>
 8000820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000824:	d027      	beq.n	8000876 <GPIO_CRLH_PIN_POSITION+0xae>
 8000826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800082a:	dc03      	bgt.n	8000834 <GPIO_CRLH_PIN_POSITION+0x6c>
 800082c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000830:	d01f      	beq.n	8000872 <GPIO_CRLH_PIN_POSITION+0xaa>
 8000832:	e026      	b.n	8000882 <GPIO_CRLH_PIN_POSITION+0xba>
 8000834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000838:	d01f      	beq.n	800087a <GPIO_CRLH_PIN_POSITION+0xb2>
 800083a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800083e:	d01e      	beq.n	800087e <GPIO_CRLH_PIN_POSITION+0xb6>
 8000840:	e01f      	b.n	8000882 <GPIO_CRLH_PIN_POSITION+0xba>
	case GPIO_PIN_0 :
		return 0;
 8000842:	2300      	movs	r3, #0
 8000844:	e01e      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000846:	2304      	movs	r3, #4
 8000848:	e01c      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 800084a:	2308      	movs	r3, #8
 800084c:	e01a      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 800084e:	230c      	movs	r3, #12
 8000850:	e018      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000852:	2310      	movs	r3, #16
 8000854:	e016      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000856:	2314      	movs	r3, #20
 8000858:	e014      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 800085a:	2318      	movs	r3, #24
 800085c:	e012      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 800085e:	231c      	movs	r3, #28
 8000860:	e010      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
	case GPIO_PIN_8 :
		return 0;
 8000862:	2300      	movs	r3, #0
 8000864:	e00e      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000866:	2304      	movs	r3, #4
 8000868:	e00c      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 800086a:	2308      	movs	r3, #8
 800086c:	e00a      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 800086e:	230c      	movs	r3, #12
 8000870:	e008      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000872:	2310      	movs	r3, #16
 8000874:	e006      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000876:	2314      	movs	r3, #20
 8000878:	e004      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 800087a:	2318      	movs	r3, #24
 800087c:	e002      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 800087e:	231c      	movs	r3, #28
 8000880:	e000      	b.n	8000884 <GPIO_CRLH_PIN_POSITION+0xbc>

	}

	return 0;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <MCAL_GPIO_init>:
 * @retval						-none
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_GPIO_init(GPIO_typedefConfig* GPIOx, GPIO_pinConfig* pinConfig){
 800088e:	b590      	push	{r4, r7, lr}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]

	//port configuration register low (pins from 0 >> 7 )	GPIOx_CRL
	//port configuration register high (pins from 8 >> 15 )	GPIOx_CRH
	volatile uint32_t * configRegister = NULL;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Conf = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]

	configRegister = (pinConfig->GPIO_PinNum)<GPIO_PIN_8 ? &GPIOx->CRL : &GPIOx->CRH;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2bff      	cmp	r3, #255	; 0xff
 80008a8:	d801      	bhi.n	80008ae <MCAL_GPIO_init+0x20>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	e001      	b.n	80008b2 <MCAL_GPIO_init+0x24>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3304      	adds	r3, #4
 80008b2:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] and MODEx[1:0]
	(*configRegister) &= ~(0xf<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff84 	bl	80007c8 <GPIO_CRLH_PIN_POSITION>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	230f      	movs	r3, #15
 80008c6:	4093      	lsls	r3, r2
 80008c8:	43da      	mvns	r2, r3
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	401a      	ands	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(pinConfig->GPIO_PinMode == OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == OUTPUT_PUSH_PULL_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_PUSH_PULL_MODE){
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d00e      	beq.n	80008fc <MCAL_GPIO_init+0x6e>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	d009      	beq.n	80008fc <MCAL_GPIO_init+0x6e>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d004      	beq.n	80008fc <MCAL_GPIO_init+0x6e>
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b06      	cmp	r3, #6
 80008fa:	d110      	bne.n	800091e <MCAL_GPIO_init+0x90>

		//configure pin CNF and MODE
		Pin_Conf = (((pinConfig->GPIO_PinMode-4) << 2) | ((pinConfig->GPIO_Output_Speed )& 0x0f));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	3b04      	subs	r3, #4
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	b25b      	sxtb	r3, r3
 8000910:	f003 030f 	and.w	r3, r3, #15
 8000914:	b25b      	sxtb	r3, r3
 8000916:	4313      	orrs	r3, r2
 8000918:	b25b      	sxtb	r3, r3
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e039      	b.n	8000992 <MCAL_GPIO_init+0x104>

	}else{	//if pin is input
		if (pinConfig -> GPIO_PinMode == INPUT_ANLOG_MODE || pinConfig->GPIO_PinMode == INPUT_FLOATING_MODE){
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <MCAL_GPIO_init+0xa4>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b01      	cmp	r3, #1
 8000930:	d108      	bne.n	8000944 <MCAL_GPIO_init+0xb6>
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x00) & 0x0f;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	789b      	ldrb	r3, [r3, #2]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	b2db      	uxtb	r3, r3
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e026      	b.n	8000992 <MCAL_GPIO_init+0x104>
		}else if (pinConfig -> GPIO_PinMode == AF_INPUT_FLOATING_MODE){ //Input Floating
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b08      	cmp	r3, #8
 800094c:	d102      	bne.n	8000954 <MCAL_GPIO_init+0xc6>
			Pin_Conf = ((INPUT_FLOATING_MODE<<2) | 0x00) & 0x0f;
 800094e:	2304      	movs	r3, #4
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e01e      	b.n	8000992 <MCAL_GPIO_init+0x104>
		}else{		//Input PU PD
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x00) & 0x0f;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	73fb      	strb	r3, [r7, #15]

			if(pinConfig->GPIO_PinMode == INPUT_PULL_UP_MODE){
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b02      	cmp	r3, #2
 800096c:	d108      	bne.n	8000980 <MCAL_GPIO_init+0xf2>
				GPIOx->ODR |= pinConfig->GPIO_PinNum;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	e008      	b.n	8000992 <MCAL_GPIO_init+0x104>
			}else{
				GPIOx->ODR &= ~(pinConfig->GPIO_PinNum);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b29b      	uxth	r3, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	401a      	ands	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on the register
	(*configRegister) |= (Pin_Conf<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
 8000992:	7bfc      	ldrb	r4, [r7, #15]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff14 	bl	80007c8 <GPIO_CRLH_PIN_POSITION>
 80009a0:	4603      	mov	r3, r0
 80009a2:	fa04 f203 	lsl.w	r2, r4, r3
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	601a      	str	r2, [r3, #0]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd90      	pop	{r4, r7, pc}

080009b8 <ARAFA_CallBack>:
#include"USART.h"
#include"RCC.h"

unsigned int IRQ_FLAG = 0;
unsigned  ch;
void ARAFA_CallBack(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	MCAL_UART_SendDate(USART1, &ch, Disable);
 80009bc:	2200      	movs	r2, #0
 80009be:	4905      	ldr	r1, [pc, #20]	; (80009d4 <ARAFA_CallBack+0x1c>)
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <ARAFA_CallBack+0x20>)
 80009c2:	f7ff fe71 	bl	80006a8 <MCAL_UART_SendDate>
	MCAL_UART_RecieveDate(USART1, &ch, Enable);
 80009c6:	2201      	movs	r2, #1
 80009c8:	4902      	ldr	r1, [pc, #8]	; (80009d4 <ARAFA_CallBack+0x1c>)
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <ARAFA_CallBack+0x20>)
 80009cc:	f7ff fe96 	bl	80006fc <MCAL_UART_RecieveDate>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000005c 	.word	0x2000005c
 80009d8:	40013800 	.word	0x40013800

080009dc <clock_init>:

void clock_init(void){
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	//	Bit 2 IOPAEN: IO port A clock enable
	//	Set and cleared by software.
	//	0: IO port A clock disabled
	//	1: IO port A clock enabled

	RCC_GPIOA_CLK_EN();
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <clock_init+0x3c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <clock_init+0x3c>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]

	//	Bit 3 IOPBEN: IO port B clock enable
	//	Set and cleared by software.
	//	0: IO port B clock disabled
	//	1: IO port B clock enabled
	RCC_GPIOB_CLK_EN();
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <clock_init+0x3c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <clock_init+0x3c>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <clock_init+0x3c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <clock_init+0x3c>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6193      	str	r3, [r2, #24]

	RCC_USART1_CLK_Enable();
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <clock_init+0x3c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <clock_init+0x3c>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6193      	str	r3, [r2, #24]

}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000

08000a1c <main>:
	}
}


int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0

	clock_init();
 8000a22:	f7ff ffdb 	bl	80009dc <clock_init>



	UART_Config uartcfg;

	uartcfg.BuadRate = UART_BuadRate_115200;
 8000a26:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a2a:	607b      	str	r3, [r7, #4]
	uartcfg.HWFlowCtl = UART_HWFlowCtrl_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	727b      	strb	r3, [r7, #9]
	uartcfg.IRQEnable = UART_IRQ_Enable_RXNE_or_ORE ;
 8000a30:	2320      	movs	r3, #32
 8000a32:	72bb      	strb	r3, [r7, #10]
	uartcfg.P_IRQ_CallBack = ARAFA_CallBack;
 8000a34:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <main+0x40>)
 8000a36:	60fb      	str	r3, [r7, #12]
	uartcfg.Parity = UART_Parity_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	723b      	strb	r3, [r7, #8]
	uartcfg.Word_Lenght = UART_Word_Lenght_8B;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	707b      	strb	r3, [r7, #1]
	uartcfg.StopBits = UART_StopBits_One;
 8000a40:	2300      	movs	r3, #0
 8000a42:	70bb      	strb	r3, [r7, #2]
	uartcfg.USART_Mode = UART_Mode_RX_TX;
 8000a44:	230c      	movs	r3, #12
 8000a46:	703b      	strb	r3, [r7, #0]

	MCAL_UART_Init(USART1, &uartcfg);
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <main+0x44>)
 8000a4e:	f7ff fcf9 	bl	8000444 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(USART1);
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <main+0x44>)
 8000a54:	f7ff fdc2 	bl	80005dc <MCAL_UART_GPIO_SetPins>

	while(1){
 8000a58:	e7fe      	b.n	8000a58 <main+0x3c>
 8000a5a:	bf00      	nop
 8000a5c:	080009b9 	.word	0x080009b9
 8000a60:	40013800 	.word	0x40013800

08000a64 <Reset_Handler>:
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopForever+0x2>)
 8000a66:	4685      	mov	sp, r0
 8000a68:	f3af 8000 	nop.w
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopForever+0xa>)
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopForever+0xe>)
 8000a72:	2300      	movs	r3, #0
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:
 8000a76:	58d4      	ldr	r4, [r2, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:
 8000a7c:	18c4      	adds	r4, r0, r3
 8000a7e:	428c      	cmp	r4, r1
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopForever+0x12>)
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopForever+0x16>)
 8000a86:	2300      	movs	r3, #0
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:
 8000a8e:	42a2      	cmp	r2, r4
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>
 8000a92:	f000 f811 	bl	8000ab8 <__libc_init_array>
 8000a96:	f7ff ffc1 	bl	8000a1c <main>

08000a9a <LoopForever>:
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
 8000a9c:	20002800 	.word	0x20002800
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	08000b38 	.word	0x08000b38
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000060 	.word	0x20000060

08000ab4 <ADC1_2_IRQHandler>:
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>
	...

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	2500      	movs	r5, #0
 8000abc:	4e0c      	ldr	r6, [pc, #48]	; (8000af0 <__libc_init_array+0x38>)
 8000abe:	4c0d      	ldr	r4, [pc, #52]	; (8000af4 <__libc_init_array+0x3c>)
 8000ac0:	1ba4      	subs	r4, r4, r6
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	42a5      	cmp	r5, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	f000 f81a 	bl	8000b00 <_init>
 8000acc:	2500      	movs	r5, #0
 8000ace:	4e0a      	ldr	r6, [pc, #40]	; (8000af8 <__libc_init_array+0x40>)
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <__libc_init_array+0x44>)
 8000ad2:	1ba4      	subs	r4, r4, r6
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	42a5      	cmp	r5, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ae0:	4798      	blx	r3
 8000ae2:	3501      	adds	r5, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aea:	4798      	blx	r3
 8000aec:	3501      	adds	r5, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08000b30 	.word	0x08000b30
 8000af4:	08000b30 	.word	0x08000b30
 8000af8:	08000b30 	.word	0x08000b30
 8000afc:	08000b34 	.word	0x08000b34

08000b00 <_init>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	bf00      	nop
 8000b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b06:	bc08      	pop	{r3}
 8000b08:	469e      	mov	lr, r3
 8000b0a:	4770      	bx	lr

08000b0c <_fini>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr
