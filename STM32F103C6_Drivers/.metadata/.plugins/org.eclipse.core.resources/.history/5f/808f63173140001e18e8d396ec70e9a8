/*
 * I2C.c
 *
 *  Created on: Aug 21, 2023
 *      Author: ARAFA
 */

#include"STM32F103x8.h"
#include"I2C.h"
#include"RCC.h"

//A Copy to be used in whole program
I2C_Config_t Gp_I2C_Config[2] = {NULL,NULL};

#define I2C1_INDEX		0
#define I2C2_INDEX		1

/********************************************************************************************************************************
 *->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> I2C API'S  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 *********************************************************************************************************************************/



/**================================================================
 * @Fn					- MCAL_I2C_Init
 * @brief 				- Initializes I2C according to the specified parameters
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- I2C_Config: All the I2C configurations
 * @retval 				- None
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void MCAL_I2C_Init(I2C_typedef* I2Cx, I2C_Config_t * I2C_Config){

	uint16_t tempreg = 0;
	uint16_t freqrange = 0;
	uint32_t pclk1 = 8000000;
	uint16_t result = 0;

	//Enable RCC Clock
	if(I2Cx == I2C1){
		Gp_I2C_Config[I2C1_INDEX] = *I2C_Config;
		RCC_I2C1_CLK_Enable();

	}else{
		Gp_I2C_Config[I2C2_INDEX] = *I2C_Config;
		RCC_I2C2_CLK_Enable();

	}


	//MODE
	if(I2C_Config->I2C_SM_Bus_Mode == I2C_I2C_Mode){

		/****************INIT TIME*************/
		//I2C_CR2 Bits 5:0 FREQ[5:0]: Peripheral clock frequency from APB1

		//copy content of CR2
		tempreg = I2Cx->CR2;

		//clear freq[5:0];
		tempreg &= ~(I2C_CR2_FREQ);

		//get pclk1 freq
		pclk1 = MCAL_RCC_GetPCLK1_CLCKFreq();

		//set freq depending on pclk value
		freqrange = (uint16_t) (pclk1 / 1000000);

		//put freqrange value in tempreg
		tempreg |= freqrange;

		//write to CR2
		I2Cx->CR2 = tempreg;

		//2- Configure the clock control register (Thigh = CCR * TPCLK1)
		//Disable the peripheral in PE bit to configure the time
		I2Cx->CR1 &= ~(I2C_CR1_PE);

		//clear tempreg to use it again
		tempreg = 0;

		/*Configure speed in I2C standard mode*/
		if((I2C_Config->I2C_Clock_Freq == I2C_SCLK_SM_50K ) || (I2C_Config->I2C_Clock_Freq == I2C_SCLK_SM_100K)){
			/*standard mode calculation*/
			//Tclk / 2 = CRR * Tpclk1
			//CRR = Tclk / (2  * Tpclk1)
			//CRR = Fpclk1 / (2 * Fclk)
			result = (uint16_t) (pclk1 / (I2C_Config->I2C_Clock_Freq) << 1);

			tempreg |= result;

			//write to ccr
			I2Cx->CCR = tempreg;

			/*********I2C_TRISE INit config ************/
//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
//			therefore the TRISE[5:0] bits must be programmed with 09h.
//			(1000 ns / 125 ns = 8 + 1)
//

			I2Cx->TRISE = freqrange + 1;


		}else{
			//Fast mode not supported
		}


		/***************CR1 configuration ****************/
		tempreg = 0 ;

		//copy content of cr1 reg in tempreg
		tempreg = I2Cx->CR1;

		//edit on tempreg
		tempreg |=(uint16_t)((I2C_Config->I2C_Clock_Stretch_Mode) | (I2C_Config->I2C_Acknowledge_Mode) | (I2C_Config->I2C_SM_Bus_Mode) | (I2C_Config->I2C_General_Call_Mode));

		I2Cx->CR1 = tempreg;

		/***************OAR1 &OAR2 configuration ****************/
		tempreg = 0;

		if(I2C_Config->I2C_Slave_Address_Mode.Dual_Address_Enable == 1){

			tempreg = I2C_OAR2_ENDUAL;

			tempreg |= I2C_Config->I2C_Slave_Address_Mode.Secondary_Slave_Address << I2C_OAR2_ENDUAL;

		}









	}else{

	}









}
void MCAL_I2C_DeInit(I2C_typedef* I2Cx);
void MCAL_I2C_Set_GPIO_PINS(I2C_typedef* I2Cx);



