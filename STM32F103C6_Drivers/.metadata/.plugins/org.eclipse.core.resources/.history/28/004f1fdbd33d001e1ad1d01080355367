/*
 * SPI.c
 *
 *  Created on: Aug 18, 2023
 *      Author: ARAFA
 */


#include"SPI.h"
#include"RCC.h"
#include "EXTI_driver.h"

SPI_Config* Gp_SPI_Config [2] = {NULL,NULL};

#define SPI1_INDEX		0
#define SPI2_INDEX		1



#define TXE 				(uint16_t)(0x2)
#define RXNE				(uint16_t)(0x1)



/**================================================================
 * @Fn					- MCAL_SPI_Init
 * @brief 				- Initializes SPI according to the specified parameters
 * @param [in] 			- SPIx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- SPI_Config: All the SPI configurations
 * @retval 				- None
 * Note					- Supports SPI full duplex Master/Slave only & NSS HW/SW
 * 						in case of master you have to configure pin and drive it
 */
void MCAL_SPI_Init(SPI_typedef* SPIx, SPI_Config* SPI_Config){

	//SAFETY TO THE CONFIG
	uint16_t tmp_CR1 = 0 ;
	uint16_t tmp_CR2 = 0;

	//enable clock
	if(SPIx == SPI1){

		Gp_SPI_Config[SPI1_INDEX] = SPI_Config;
		RCC_SPI1_CLK_Enable();

	}else if(SPIx == SPI2){

		Gp_SPI_Config[SPI2_INDEX] = SPI_Config;
		RCC_SPI2_CLK_Enable();

	}

	//Enable SPI
	tmp_CR1 |= (1<<6);

	//device mode
	tmp_CR1 |= SPI_Config->Device_Mode;

	//communication mode
	tmp_CR1 |= SPI_Config->Communication_Mode;

	//frame format
	tmp_CR1 |= SPI_Config->Frame_Format;

	//data size
	tmp_CR1 |= SPI_Config->Data_Size;

	//clock polarity
	tmp_CR1 |= SPI_Config->Clock_Polarity;

	//clock phase
	tmp_CR1 |= SPI_Config->Clock_Phase;


	// ===================== NSS ===================
	if(SPI_Config->NSS == SPI_NSS_HW_MASTER_OUTPUT_ENABLED){

		tmp_CR2 |= SPI_Config->NSS;

	}else if (SPI_Config->NSS == SPI_NSS_HW_MASTER_OUTPUT_DISABLED){

		tmp_CR2 &= SPI_Config->NSS;

	}else{

		tmp_CR1 |= SPI_Config->NSS;

	}


	//Buadrate
	tmp_CR1 |= SPI_Config->Buadrate_Prescaler;


	// ===================== IRQ ==================
	if(SPI_Config->IRQ_En != SPI_IRQ_NONE){

		tmp_CR2 |= SPI_Config->IRQ_En;

		if(SPIx == SPI1){

			NVIC_SPI1_IRQ_Enable;

		}else if (SPIx == SPI2){

			NVIC_SPI2_IRQ_Enable;

		}

	}


	SPIx->CR1 = tmp_CR1;
	SPIx->CR2 = tmp_CR2;

}






/**================================================================
 * @Fn					- MCAL_SPI_DeInit
 * @brief 				- Initializes SPI according to the specified parameters
 * @param [in] 			- SPIx: where x can be (1 or 2) depending on the device used
 * @retval 				- None
 * Note					- Supports SPI full duplex Master/Slave only & NSS HW/SW
 * 						in case of master you have to configure pin and drive it
 */
void MCAL_SPI_DeInit(SPI_typedef* SPIx){

	if(SPIx == SPI1){

		RCC_SPI1_CLK_Disable();
		NVIC_SPI1_IRQ_Disable;

	}else if(SPIx == SPI2){

		RCC_SPI2_CLK_Disable();
		NVIC_SPI2_IRQ_Disable;

	}

}



/**================================================================
 * @Fn					- MCAL_SPI_Send_Data
 * @brief 				- Send data via SPI
 * @param [in] 			- SPIx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- pTxBuffer: buffer contain data
 * @param [in] 			- poll_en: Whether you're using polling or interrupt
 * @retval 				- None
 * Note					- None
 */
void MCAL_SPI_Send_Data(SPI_typedef* SPIx, uint16_t * pTxBuffer , enum pollingMechanism poll_en){

	if(poll_en == En)
		while(!(SPIx->SR & (TXE)));
	 *pTxBuffer = SPIx->DR ;

}



/**================================================================
 * @Fn					- MCAL_SPI_Receive_Data
 * @brief 				- Receive data via SPI
 * @param [in] 			- SPIx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- pTxBuffer: buffer contain data
 * @param [in] 			- poll_en: Whether you're using polling or interrupt
 * @retval 				- None
 * Note					- None
 */
void MCAL_SPI_Receive_Data(SPI_typedef* SPIx, uint16_t * pRxBuffer , enum pollingMechanism poll_en){

	if(poll_en == En)
			while(!(SPIx->SR & (TXE)));
		 *pTxBuffer = SPIx->DR ;
}
void MCAL_SPI_GPIO_Set_Pins(SPI_typedef* SPIx);

void MCAL_SPI_TX_RX(SPI_typedef* SPIx, uint16_t * pTxBuffer , enum pollingMechanism poll_en);
