/*
 * I2C.c
 *
 *  Created on: Aug 21, 2023
 *      Author: ARAFA
 */

#include"STM32F103x8.h"
#include"I2C.h"
#include"RCC.h"
#include"EXTI_driver.h"

//A Copy to be used in whole program
I2C_Config_t Gp_I2C_Config[2] = {NULL,NULL};

#define I2C1_INDEX		0
#define I2C2_INDEX		1

/********************************************************************************************************************************
 *->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> I2C API'S  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 *********************************************************************************************************************************/



/**================================================================
 * @Fn					- MCAL_I2C_Init
 * @brief 				- Initializes I2C according to the specified parameters
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- I2C_Config: All the I2C configurations
 * @retval 				- None
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void MCAL_I2C_Init(I2C_typedef* I2Cx, I2C_Config_t * I2C_Config){

	uint16_t tempreg = 0;
	uint16_t freqrange = 0;
	uint32_t pclk1 = 8000000;
	uint16_t result = 0;

	//Enable RCC Clock
	if(I2Cx == I2C1){
		Gp_I2C_Config[I2C1_INDEX] = *I2C_Config;
		RCC_I2C1_CLK_Enable();

	}else{
		Gp_I2C_Config[I2C2_INDEX] = *I2C_Config;
		RCC_I2C2_CLK_Enable();

	}


	//MODE
	if(I2C_Config->I2C_SM_Bus_Mode == I2C_I2C_Mode){

		/****************INIT TIME*************/
		//I2C_CR2 Bits 5:0 FREQ[5:0]: Peripheral clock frequency from APB1

		//copy content of CR2
		tempreg = I2Cx->CR2;

		//clear freq[5:0];
		tempreg &= ~(I2C_CR2_FREQ_Msk);

		//get pclk1 freq
		pclk1 = MCAL_RCC_GetPCLK1_CLCKFreq();

		//set freq depending on pclk value
		freqrange = (uint16_t) (pclk1 / 1000000);

		//put freqrange value in tempreg
		tempreg |= freqrange;

		//write to CR2
		I2Cx->CR2 = tempreg;

		//2- Configure the clock control register (Thigh = CCR * TPCLK1)
		//Disable the peripheral in PE bit to configure the time
		I2Cx->CR1 &= ~(I2C_CR1_PE);

		//clear tempreg to use it again
		tempreg = 0;

		/*Configure speed in I2C standard mode*/
		if((I2C_Config->I2C_Clock_Freq == I2C_SCLK_SM_50K ) || (I2C_Config->I2C_Clock_Freq == I2C_SCLK_SM_100K)){
			/*standard mode calculation*/
			//Tclk / 2 = CRR * Tpclk1
			//CRR = Tclk / (2  * Tpclk1)
			//CRR = Fpclk1 / (2 * Fclk)
			result = (uint16_t) (pclk1 / (I2C_Config->I2C_Clock_Freq << 1));

			tempreg |= result;

			//write to ccr
			I2Cx->CCR = tempreg;

			/*********I2C_TRISE INit config ************/
			//			For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//			therefore the TRISE[5:0] bits must be programmed with 09h.
			//			(1000 ns / 125 ns = 8 + 1)
			//

			I2Cx->TRISE = freqrange + 1;


		}else{
			//Fast mode not supported
		}


		/***************CR1 configuration ****************/
		tempreg = 0 ;

		//copy content of cr1 reg in tempreg
		tempreg = I2Cx->CR1;

		//edit on tempreg
		tempreg |=(uint16_t)((I2C_Config->I2C_Clock_Stretch_Mode) | (I2C_Config->I2C_Acknowledge_Mode) | (I2C_Config->I2C_SM_Bus_Mode) | (I2C_Config->I2C_General_Call_Mode));

		I2Cx->CR1 = tempreg;

		/***************OAR1 &OAR2 configuration ****************/
		tempreg = 0;

		if(I2C_Config->I2C_Slave_Address_Mode.Dual_Address_Enable == 1){

			tempreg = I2C_OAR2_ENDUAL;

			tempreg |= I2C_Config->I2C_Slave_Address_Mode.Secondary_Slave_Address << I2C_OAR2_ADD2_Pos;

			I2Cx->OAR2 = tempreg;

		}

		tempreg = 0;

		tempreg |= I2C_Config->I2C_Slave_Address_Mode.Primary_Slave_Address << 1;

		tempreg |=  I2C_Config->I2C_Slave_Address_Mode.Addressing_Bits;

		I2Cx->OAR1 = tempreg;

	}else{
		//SMBUS Not Supported
	}


	//Interrupt mode (slave mode) // check if p_CallBack_pointer != NULL
	if(I2C_Config->P_Slave_Event_CallBack != NULL){
		///enable IRQ
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);

		if(I2Cx == I2C1){
			NVIC_I2C1_EV_IRQ_Enable;
			NVIC_I2C1_ER_IRQ_Enable;

		}else if (I2Cx == I2C2){
			NVIC_I2C2_EV_IRQ_Enable;
			NVIC_I2C2_ER_IRQ_Enable;

		}
		I2Cx->SR1 = 0;
		I2Cx->SR2 = 0;
	}

	/*Enable the selected I2C peripheral*/
	I2Cx->CR1 |= I2C_CR1_PE;



}


/**================================================================
 * @Fn					- MCAL_I2C_DeInit
 * @brief 				- DeInitializes I2C
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @retval 				- None
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */
void MCAL_I2C_DeInit(I2C_typedef* I2Cx){

	if(I2Cx == I2C1){

		NVIC_I2C1_ER_IRQ_Disable;
		NVIC_I2C1_EV_IRQ_Disable;
		RCC_I2C1_CLK_Disable();


	}else if(I2Cx == I2C2){
		NVIC_I2C2_ER_IRQ_Disable;
		NVIC_I2C2_EV_IRQ_Disable;
		RCC_I2C2_CLK_Disable();

	}
}


/**================================================================
 * @Fn					- MCAL_I2C_GPIO_Set_Pins
 * @brief 				- Sets Pins of I2C accoring to the recommended settings in data sheet
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @retval 				- None
 * Note					- None
 *
 */
void MCAL_I2C_Set_GPIO_PINS(I2C_typedef* I2Cx){
	GPIO_pinConfig gpio_pinCfg;

	if(I2Cx == I2C1){
		//PB6 SCL
		//PB7 SDA
		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_6;
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);

		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_7;
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);

	}else if(I2Cx == I2C2){
		//PB10 SCL
		//PB11 SDA
		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_10;
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);

		gpio_pinCfg.GPIO_PinNum = GPIO_PIN_11;
		gpio_pinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
		gpio_pinCfg.GPIO_PinMode = AF_OUTPUT_OPEN_DRAIN_MODE;
		MCAL_GPIO_init(GPIOB, &gpio_pinCfg);
	}
}



//Master transmit polling



/**================================================================
 * @Fn					- MCAL_I2C_Master_Transmit
 * @brief 				- Master transmit function
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- devAdd: the address of slave you want to transmit to
 * @param [in] 			- dataOut: A buffer holds the data to be sent
 * @param [in] 			- dataLen: Length of data in bytes
 * @param [in] 			- stop: Enabling or disabling stop condition
 * @param [in] 			- start: If you want to send a Start or repeated start
 * @retval 				- None
 * Note					- Supports Master in polling mechanism
 *
 */
void MCAL_I2C_Master_TX(I2C_typedef* I2Cx ,uint16_t devAdd, uint8_t*  dataOut, uint32_t dataLen, StopCondition stop , RepeatedStart start  ){

	int i ;

	//1.set start bit in I2C_CR1
	I2C_Generate_Start(I2Cx, ENABLE, start);

	//2. wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_Get_FlagStatus(I2Cx, EV5)));

	//3.writing DR register with Address
	I2C_SendAddress(I2Cx, devAdd, I2C_Direction_Transmission); //address

	// wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_Get_FlagStatus(I2Cx, EV6)));

	//4. check : TRA , BUSY , MSL , TXE flags
	while(!(I2C_Get_FlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING)));

	for(i = 0 ; i<dataLen ; i++){
		I2Cx->DR = dataOut[i];
		//5.wait EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!(I2C_Get_FlagStatus(I2Cx, EV8)));
	}
	// Already the last byte checked in the for loop
	//	EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//	while(!I2C_GetFlagStatus(I2Cx, EV8_2));


	//6. Stop condition
	if(stop == withstop){
		I2C_Generate_Stop(I2Cx,ENABLE);
	}

}



/**================================================================
 * @Fn					- MCAL_I2C_Master_Receive
 * @brief 				- Master transmit function
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- devAdd: the address of slave you want to transmit to
 * @param [in] 			- dataOut: A buffer holds the received data
 * @param [in] 			- dataLen: Length of data in bytes
 * @param [in] 			- stop: Enabling or disabling stop condition
 * @param [in] 			- start: If you want to send a Start or repeated start
 * @retval 				- None
 * Note					- Supports Master in polling mechanism
 *
 */
void MCAL_I2C_Master_RX(I2C_typedef* I2Cx ,uint16_t devAdd, uint8_t*  dataOut, uint32_t dataLen, StopCondition stop , RepeatedStart start  ){

	uint8_t index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;

	int i ;

	//1.set start bit in I2C_CR1
	I2C_Generate_Start(I2Cx, ENABLE, start);

	//2. wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address
	while(!(I2C_Get_FlagStatus(I2Cx, EV5)));

	//3.writing DR register with Address
	I2C_SendAddress(I2Cx, devAdd, I2C_Direction_Receive); //address

	// wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!(I2C_Get_FlagStatus(I2Cx, EV6)));

	I2C_Acknowledge_Config(I2Cx,ENABLE);

	if(dataLen){
		for(i=dataLen ; i>1 ; i--){
			// Wait for EV7: RXNE=1, Cleared by reading DR
			while(!(I2C_Get_FlagStatus(I2Cx, EV7)));
			//read data
			*dataOut = I2Cx->DR;
			//icrement
			dataOut++;
		}
		I2C_Acknowledge_Config(I2Cx,DISABLE);
	}

	//6. Stop condition
	if(stop == withstop){
		I2C_Generate_Stop(I2Cx,ENABLE);
	}


	//re enable ack
	if(Gp_I2C_Config[index].I2C_Acknowledge_Mode == I2C_ACK_RETURNED){
		I2C_Acknowledge_Config(I2Cx,ENABLE);
	}
}



//slave interrupt

/**================================================================
 * @Fn					- MCAL_I2C_Slave_Transmit
 * @brief 				- To send data in case you were a slave
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- data: the data to be sent
 * @retval 				- None
 * Note					- None
 *
 */
void MCAL_I2C_Slave_Transmit(I2C_typedef* I2Cx , uint8_t data ){
	I2Cx->DR = data;
}


/**================================================================
 * @Fn					- MCAL_I2C_Slave_Recieve
 * @brief 				- To send data in case you were a slave
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @retval 				- the received data
 * Note					- None
 *
 */
void MCAL_I2C_Slave_Receive(I2C_typedef* I2Cx ){
	return (uint8_t)I2Cx->DR;
}





//Generic APIS
/**================================================================
 * @Fn					- I2C_Generate_START
 * @brief 				- Generate start or repeated start
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- state: Enabling or disabling start
 * @param [in] 		    - Start: If you want to send a Start or repeated start
 * @retval 				- None
 * Note					- None
 *
 */
void I2C_Generate_Start(I2C_typedef* I2Cx, FunctionalState state, RepeatedStart start){

	//check start condition
	if(start != repeatedstart){
		while(I2C_Get_FlagStatus(I2Cx, I2C_FLAG_BUSY) 	);
	}
	//	Bit 8 START: Start generation
	//	This bit is set and cleared by software and cleared by hardware when start is sent or PE=0.
	//	In Master Mode:
	//	0: No Start generation
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free

	if(state != DISABLE){
		//Enable start bit
		I2Cx->CR1 |= I2C_CR1_START;
	}else{
		//Disable start bit
		I2Cx->CR1 &= ~(I2C_CR1_START);

	}
}




/**================================================================
 * @Fn					- I2C_Generate_STOP
 * @brief 				- Generate stop condition
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- FunctionalState: Enabling or disabling stop
 * @retval 				- None
 * Note					- Supports Master in polling mechanism & slave interrupt Mechanism
 *
 */

void I2C_Generate_Stop(I2C_typedef * I2Cx, FunctionalState newstate){
	// STOP 9 in CR1

	if(newstate != DISABLE){
		I2Cx->CR1 |= I2C_CR1_STOP;
	}else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}

/**================================================================
 * @Fn					- I2C_GetFlagStatus
 * @brief 				- Gets the status of specific flag
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- flag: the flag you want to check its status
 * @retval 				- None
 * Note					- None
 *
 */

FlagStatus I2C_Get_FlagStatus(I2C_typedef* I2Cx , FlagStatus flag ){
	volatile uint32_t dummyRead;
	uint32_t flag1 = 0;
	uint32_t flag2 = 0;
	uint32_t lastevent = 0 ;
	FlagStatus bitStatus = RESET;

	switch(flag){

	case I2C_FLAG_BUSY:
		//		Bit 1 BUSY: Bus busy
		//		0: No communication on the bus
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0)
		if(I2Cx->SR2 & I2C_SR2_BUSY )
			bitStatus = SET;
		else
			bitStatus = RESET;
		break;


	case EV5:
		//		Bit 0 SB: Start bit (Master mode)
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if(I2Cx->SR1 & I2C_SR1_SB)
			bitStatus = SET;
		else
			bitStatus = RESET;
		break;

	case EV6:
		//		Bit 1 ADDR: Address sent (master mode
		//		0: Address mismatched or not received.
		//		1: Received address matched.
		//
		if(I2Cx->SR1 & I2C_SR1_ADDR)
			bitStatus = SET;
		else
			bitStatus = RESET;
		//		ADDR=1, cleared by reading SR1 register followed by reading SR2
		dummyRead = I2Cx->SR2;
		break;

	case MASTER_BYTE_TRANSMITTING:

		flag1 = I2Cx->SR1;
		flag2 = I2Cx->SR2;
		flag2 = flag2 << 16;
		lastevent = (flag1 | flag2) & ((uint32_t)(0x00FFFFFF));

		if((lastevent & flag ) == flag)
			bitStatus =SET;
		else
			bitStatus = RESET;
		break;

	case EV8:
		//		Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if(I2Cx->SR1 & I2C_SR1_TXE)
			bitStatus = SET;
		else
			bitStatus = RESET;
		break;

	case EV7:
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if(I2Cx->SR1 & I2C_SR1_RXNE)
			bitStatus = SET;
		else
			bitStatus = RESET;
		break;


	}



	return bitStatus;
}



/**================================================================
 * @Fn					- I2C_SendAddress
 * @brief 				- Generate start or repeated start
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- Address: The address you want to send
 * @param [in] 			- direction: Determines whether you are a transmitter or reciever
 * @retval 				- None
 * Note					- Supports only 7-bit address mode
 *
 */
void I2C_SendAddress(I2C_typedef* I2Cx , uint16_t Address , I2C_Direction direction ){

	Address = (Address << 1);

	if(direction != I2C_Direction_Transmission){
		//read
		Address |= (1<<0);

	}else{
		//write
		Address &= ~(1<<0);
	}
	//send the address
	I2Cx->DR = Address;
}



/**================================================================
 * @Fn					- I2C_AcknowledgeConfig
 * @brief 				- Enabling or disbling acknowledge
 * @param [in] 			- I2Cx: where x can be (1 or 2) depending on the device used
 * @param [in] 			- FunctionalState: Enabling or disabling start
 * @retval 				- None
 * Note					- None
 *
 */


void I2C_Acknowledge_Config(I2C_typedef* I2Cx, FunctionalState NewState)
{

	if (NewState != DISABLE)
	{
		/* Enable the acknowledgement */
		I2Cx->CR1 |= I2C_CR1_ACK;
	}
	else
	{
		/* Disable the acknowledgement */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}


void Slave_Status(I2C_typedef* I2Cx, Slave_State state)
{

	uint8_t index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;

	switch(state){

	case I2C_ERROR_AF :

		if(I2Cx->SR2 & (I2C_SR2_TRA)){
			// slave not send
		}
		break;

	case I2C_EV_STOP:

		if(I2Cx->SR2 & (I2C_SR2_TRA)){
			//TELL THE APP stop CONDITION IS SENT
			Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
		}
		break;

	case I2C_EV_ADDR_MATCHED:

		//TELL THE APP stop CONDITION IS SENT
		Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_MATCHED);

		break;

	case I2C_EV_DATA_REQ:
		if(I2Cx->SR2 & (I2C_SR2_TRA)){
			//TELL THE APP stop CONDITION IS SENT
			Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_MATCHED);

		}
		break;
	case I2C_EV_DATA_RCV:
		//make sure that the slave in receiver mode

		if(!(I2Cx->SR2 & (I2C_SR2_TRA))){
			// The app should read the data
			Gp_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
		}
		break;

	}

}








//Interrupts
void I2C1_EV_IRQHandler(void){/* I2C1 event interrupt                             */
	volatile uint32_t dummyRead = 0;
	uint32_t flag1,flag2,flag3;

	I2C_typedef * I2Cx  = I2C1;

	flag1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
	flag2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);

	flag3 = I2Cx->CR1 & (I2C_SR1_STOPF);

	//handle STOPF EV
	if(flag1 && flag3){
		//clear flag
		// write to cr1
		I2Cx->CR1 |= 0x0000;
		Slave_Status(I2Cx, I2C_EV_STOP);

	}



	//Handle for ADDR event
	if(flag1 && flag3){
		//check device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL)){
			//master
		}else{
			//slave mode
			// clear by reading sr1 & sr2
			dummyRead = I2Cx->SR1;
			dummyRead = I2Cx->SR2;
			Slave_Status(I2Cx, I2C_EV_ADDR_MATCHED);
		}
	}


	flag3 = I2Cx->SR1 & (I2C_SR1_TXE);

	//handle TXE event
	if(flag1 && flag2 && flag3){
		//check device mode
				if(I2Cx->SR2 & (I2C_SR2_MSL)){
					//master
				}else{
					//slave mode

					Slave_Status(I2Cx, I2C_EV_DATA_REQ);
				}
	}



	flag3 = I2Cx->SR1 & (I2C_SR1_RXNE);

	//handle SB1
	if(flag1 && flag2 && flag3){
		//check device mode
				if(I2Cx->SR2 & (I2C_SR2_MSL)){
					//master
				}else{
					//slave mode

					Slave_Status(I2Cx, I2C_EV_DATA_RCV);
				}
	}


}
void I2C1_ER_IRQHandler(void){/* I2C1 error interrupt                             */

}
void I2C2_EV_IRQHandler(void)        			/* I2C2 event interrupt                             */
{

}


void I2C2_ER_IRQHandler(void)        			/* I2C2 error interrupt                             */
{

}
