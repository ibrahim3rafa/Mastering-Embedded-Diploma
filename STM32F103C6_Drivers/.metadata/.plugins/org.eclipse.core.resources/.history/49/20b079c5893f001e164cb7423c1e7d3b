/*
 * STM32F103x6.h
 *
 *  Created on: Jul 30, 2023
 *      Author: ARAFA
 */

#ifndef STM32F103X6_H_
#define STM32F103X6_H_

//------------------------------------------------------------------
//Includes
//------------------------------------------------------------------

#include"stdlib.h"
#include"stdint.h"


/****************************************************************************************************/
/****************************************************************************************************/
/****************************************************************************************************/


//------------------------------------------------------------------
//Base addresses for memories
//------------------------------------------------------------------

#define Flash_Memory_Base 							(0x08000000UL)
#define System_Memory_Base 							(0x1FFFF000UL)
#define Sram_Memory_Base 							(0x20000000UL)


#define Peripherals_Base 							(0x40000000UL)

#define Cortex_M3_Internal_Peripherals				(0xE0000000UL)



/****************************************************************************************************/
/****************************************************************************************************/
/****************************************************************************************************/


//------------------------------------------------------------------
//Base addresses for APB2 BUS Peripherals
//------------------------------------------------------------------
#define GPIOA_BASE 									(0x40010800)
#define GPIOB_BASE 									(0x40010C00)
#define GPIOC_BASE 									(0x40011000)
#define GPIOD_BASE									(0x40011400)
#define GPIOE_BASE 									(0x40011800)
#define GPIOF_BASE 									(0x40011C00)
#define GPIOG_BASE 									(0x40012000)

#define EXTI_BASE 									(0x40010400)

#define NVIC_BASE									(0xE000E100)

#define AFIO_BASE 									(0x40010000)

#define RCC_BASE 									(0x40021000)

#define USART1_BASE									(0x40013800)

#define SPI1_BASE									(0x40013000)


//------------------------------------------------------------------
//Base addresses for APB1 BUS Peripherals
//------------------------------------------------------------------
#define USART2_BASE									(0x40004400)
#define USART3_BASE									(0x40004800)

#define SPI2_BASE									(0x40003800)

#define I2C1_BASE 									(0X40005400)
#define I2C2_BASE 									(0X40005800)

/****************************************************************************************************/
/****************************************************************************************************/
/****************************************************************************************************/


//----------------------------------------------------------------
//Peripherals Registers
//----------------------------------------------------------------


//GPIO
typedef struct{
	volatile uint32_t CRL;
	volatile uint32_t CRH;
	volatile uint32_t IDR;
	volatile uint32_t ODR;
	volatile uint32_t BSRR;
	volatile uint32_t BRR;
	volatile uint32_t LCKR;
}GPIO_typedefConfig;


//RCC
typedef struct{
	volatile uint32_t CR;
	volatile uint32_t CFGR;
	volatile uint32_t CIR;
	volatile uint32_t APB2RSTR;
	volatile uint32_t APB1RSTR;
	volatile uint32_t AHBENR;
	volatile uint32_t APB2ENR;
	volatile uint32_t APB1ENR;
	volatile uint32_t BDCR;
	volatile uint32_t CSR;
	volatile uint32_t AHBSTR;
	volatile uint32_t CFGR2;
}RCC_typedef;


//EXTI
typedef struct {
	volatile uint32_t IMR;
	volatile uint32_t EMR;
	volatile uint32_t RTSR;
	volatile uint32_t FTSR;
	volatile uint32_t SWIER;
	volatile uint32_t PR;
}EXTI_typedef;


//AFIO
typedef struct {
	volatile uint32_t EVCR;
	volatile uint32_t MAPR;
	volatile uint32_t EXTICR1[4];
//	volatile uint32_t EXTICR2;
//	volatile uint32_t EXTICR3;
//	volatile uint32_t EXTICR4;
	volatile uint32_t RESERVED;  //0x18
	volatile uint32_t MAPR2;	//0x1C
}AFIO_typedef;



//USART
typedef struct {
	volatile uint32_t SR;
	volatile uint32_t DR;
	volatile uint32_t BRR;
	volatile uint32_t CR1;
	volatile uint32_t CR2;
	volatile uint32_t CR3;
	volatile uint32_t GTPR;
}USART_typedef;



//SPI
typedef struct {
	volatile uint32_t CR1;
	volatile uint32_t CR2;
	volatile uint32_t SR;
	volatile uint32_t DR;
	volatile uint32_t CRCPR;
	volatile uint32_t RXCRCR;
	volatile uint32_t TXCRCR;
	volatile uint32_t I2SCFGR;
	volatile uint32_t I2SPR;
}SPI_typedef;



//I2C
typedef struct{
	volatile uint32_t CR1;
	volatile uint32_t CR2;
	volatile uint32_t OAR1;
	volatile uint32_t OAR2;
	volatile uint32_t DR;
	volatile uint32_t SR1;
	volatile uint32_t SR2;
	volatile uint32_t CCR;
	volatile uint32_t TRISE;
}I2C_typedef;
/****************************************************************************************************/
/****************************************************************************************************/
/****************************************************************************************************/



//---------------------------------------------------------------------------------
//peripherals instants
//---------------------------------------------------------------------------------

/*GPIO_define_ref*/
#define GPIOA 										((GPIO_typedefConfig*)GPIOA_BASE)
#define GPIOB 										((GPIO_typedefConfig*)GPIOB_BASE)
#define GPIOC 										((GPIO_typedefConfig*)GPIOC_BASE)
#define GPIOD 										((GPIO_typedefConfig*)GPIOD_BASE)
#define GPIOE 										((GPIO_typedefConfig*)GPIOE_BASE)
#define GPIOF 										((GPIO_typedefConfig*)GPIOF_BASE)
#define GPIOG 										((GPIO_typedefConfig*)GPIOG_BASE)



#define	RCC											((RCC_typedef*)RCC_BASE)

#define	EXTI										((EXTI_typedef*)EXTI_BASE)

#define AFIO										((AFIO_typedef*)AFIO_BASE)

#define USART1										((USART_typedef*)USART1_BASE)
#define USART2										((USART_typedef*)USART2_BASE)
#define USART3										((USART_typedef*)USART3_BASE)

#define SPI1										((SPI_typedef*)SPI1_BASE)
#define SPI2										((SPI_typedef*)SPI2_BASE)


#define I2C1										((I2C_typedef*)I2C1_BASE)
#define I2C2										((I2C_typedef*)I2C2_BASE)


/*EXTI_REGISTERS_define_ref*/

#define NVIC_ISER0									*(volatile uint32_t *)(NVIC_BASE+0x000)
#define NVIC_ISER1									*(volatile uint32_t *)(NVIC_BASE+0x004)
#define NVIC_ISER2									*(volatile uint32_t *)(NVIC_BASE+0x008)

#define NVIC_ICER0									*(volatile uint32_t *)(NVIC_BASE+0x080)
#define NVIC_ICER1									*(volatile uint32_t *)(NVIC_BASE+0x084)
#define NVIC_ICER2									*(volatile uint32_t *)(NVIC_BASE+0x088)


#define NVIC_ISPR0									*(volatile uint32_t *)(NVIC_BASE+0x100)
#define NVIC_ISPR1									*(volatile uint32_t *)(NVIC_BASE+0x104)
#define NVIC_ISPR2									*(volatile uint32_t *)(NVIC_BASE+0x108)


#define NVIC_ICPR0									*(volatile uint32_t *)(NVIC_BASE+0x180)
#define NVIC_ICPR1									*(volatile uint32_t *)(NVIC_BASE+0x184)
#define NVIC_ICPR2									*(volatile uint32_t *)(NVIC_BASE+0x188)

#define NVIC_IABR0									*(volatile uint32_t *)(NVIC_BASE+0x200)

#define NVIC_STIR									*(volatile uint32_t *)(0xE000EF00)   /*The NVIC_STIR register is located in a separate
																							block at 0xE000EF00.*/
/****************************************************************************************************/
/****************************************************************************************************/
/****************************************************************************************************/



//--------------------------------------------------------------
//clock Enable Macros
//--------------------------------------------------------------

//GPIO ENABLES
#define RCC_GPIOA_CLK_EN()							(RCC->APB2ENR |= (1<<2))
#define RCC_GPIOB_CLK_EN()							(RCC->APB2ENR |= (1<<3))
#define RCC_GPIOC_CLK_EN()							(RCC->APB2ENR |= (1<<4))
#define RCC_GPIOD_CLK_EN()							(RCC->APB2ENR |= (1<<5))
#define RCC_GPIE_CLK_EN()							(RCC->APB2ENR |= (1<<6))

//AFIO ENABLE+
#define RCC_AFIO_CLK_EN()							(RCC->APB2ENR |= (1<<0))



/*Clock Enable / Disable*/



//ENABLE
//USART Enable
#define RCC_USART1_CLK_Enable() 						(RCC->APB2ENR |= (1<<14))
#define RCC_USART2_CLK_Enable() 						(RCC->APB1ENR |= (1<<17))
#define RCC_USART3_CLK_Enable() 						(RCC->APB1ENR |= (1<<18))



//SPI Enable
#define RCC_SPI1_CLK_Enable() 						(RCC->APB2ENR |= (1<<12))
#define RCC_SPI2_CLK_Enable() 						(RCC->APB1ENR |= (1<<14))


//I2C Enable
#define RCC_I2C1_CLK_Enable() 						(RCC->APB1ENR |= (1<<21))
#define RCC_I2C2_CLK_Enable() 						(RCC->APB1ENR |= (1<<22))



//DISABLE
//USART Disable
#define RCC_USART1_CLK_Disable() 						(RCC->APB2RSTR |= (1<<14))
#define RCC_USART2_CLK_Disable() 						(RCC->APB1RSTR |= (1<<17))
#define RCC_USART3_CLK_Disable() 						(RCC->APB1RSTR |= (1<<18))





//SPI Disable
#define RCC_SPI1_CLK_Disable() 						(RCC->APB2RSTR |= (1<<12))
#define RCC_SPI2_CLK_Disable() 						(RCC->APB1RSTR |= (1<<14))


//I2C Disable
#define RCC_I2C1_CLK_Disable() 						(RCC->APB1RSTR |= (1<<21))
#define RCC_I2C2_CLK_Disable() 						(RCC->APB1RSTR |= (1<<22))



/********************************************************/
/********************************************************/
/********************************************************/
/*******************  Bit definition  ********************/
/********************************************************/
/********************************************************/



/*******************  Bit definition for I2C_CR1 register  ********************/
#define I2C_CR1_PE_Pos                      (0U)
#define I2C_CR1_PE_Msk                      (0x1UL << I2C_CR1_PE_Pos)           /*!< 0x00000001 */
#define I2C_CR1_PE                          I2C_CR1_PE_Msk                     /*!< Peripheral Enable */
#define I2C_CR1_SMBUS_Pos                   (1U)
#define I2C_CR1_SMBUS_Msk                   (0x1UL << I2C_CR1_SMBUS_Pos)        /*!< 0x00000002 */
#define I2C_CR1_SMBUS                       I2C_CR1_SMBUS_Msk                  /*!< SMBus Mode */
#define I2C_CR1_SMBTYPE_Pos                 (3U)
#define I2C_CR1_SMBTYPE_Msk                 (0x1UL << I2C_CR1_SMBTYPE_Pos)      /*!< 0x00000008 */
#define I2C_CR1_SMBTYPE                     I2C_CR1_SMBTYPE_Msk                /*!< SMBus Type */
#define I2C_CR1_ENARP_Pos                   (4U)
#define I2C_CR1_ENARP_Msk                   (0x1UL << I2C_CR1_ENARP_Pos)        /*!< 0x00000010 */
#define I2C_CR1_ENARP                       I2C_CR1_ENARP_Msk                  /*!< ARP Enable */
#define I2C_CR1_ENPEC_Pos                   (5U)
#define I2C_CR1_ENPEC_Msk                   (0x1UL << I2C_CR1_ENPEC_Pos)        /*!< 0x00000020 */
#define I2C_CR1_ENPEC                       I2C_CR1_ENPEC_Msk                  /*!< PEC Enable */
#define I2C_CR1_ENGC_Pos                    (6U)
#define I2C_CR1_ENGC_Msk                    (0x1UL << I2C_CR1_ENGC_Pos)         /*!< 0x00000040 */
#define I2C_CR1_ENGC                        I2C_CR1_ENGC_Msk                   /*!< General Call Enable */
#define I2C_CR1_NOSTRETCH_Pos               (7U)
#define I2C_CR1_NOSTRETCH_Msk               (0x1UL << I2C_CR1_NOSTRETCH_Pos)    /*!< 0x00000080 */
#define I2C_CR1_NOSTRETCH                   I2C_CR1_NOSTRETCH_Msk              /*!< Clock Stretching Disable (Slave mode) */
#define I2C_CR1_START_Pos                   (8U)
#define I2C_CR1_START_Msk                   (0x1UL << I2C_CR1_START_Pos)        /*!< 0x00000100 */
#define I2C_CR1_START                       I2C_CR1_START_Msk                  /*!< Start Generation */
#define I2C_CR1_STOP_Pos                    (9U)
#define I2C_CR1_STOP_Msk                    (0x1UL << I2C_CR1_STOP_Pos)         /*!< 0x00000200 */
#define I2C_CR1_STOP                        I2C_CR1_STOP_Msk                   /*!< Stop Generation */
#define I2C_CR1_ACK_Pos                     (10U)
#define I2C_CR1_ACK_Msk                     (0x1UL << I2C_CR1_ACK_Pos)          /*!< 0x00000400 */
#define I2C_CR1_ACK                         I2C_CR1_ACK_Msk                    /*!< Acknowledge Enable */
#define I2C_CR1_POS_Pos                     (11U)
#define I2C_CR1_POS_Msk                     (0x1UL << I2C_CR1_POS_Pos)          /*!< 0x00000800 */
#define I2C_CR1_POS                         I2C_CR1_POS_Msk                    /*!< Acknowledge/PEC Position (for data reception) */
#define I2C_CR1_PEC_Pos                     (12U)
#define I2C_CR1_PEC_Msk                     (0x1UL << I2C_CR1_PEC_Pos)          /*!< 0x00001000 */
#define I2C_CR1_PEC                         I2C_CR1_PEC_Msk                    /*!< Packet Error Checking */
#define I2C_CR1_ALERT_Pos                   (13U)
#define I2C_CR1_ALERT_Msk                   (0x1UL << I2C_CR1_ALERT_Pos)        /*!< 0x00002000 */
#define I2C_CR1_ALERT                       I2C_CR1_ALERT_Msk                  /*!< SMBus Alert */
#define I2C_CR1_SWRST_Pos                   (15U)
#define I2C_CR1_SWRST_Msk                   (0x1UL << I2C_CR1_SWRST_Pos)        /*!< 0x00008000 */
#define I2C_CR1_SWRST                       I2C_CR1_SWRST_Msk                  /*!< Software Reset */
/*******************  Bit definition for I2C_CR2 register  ********************/
#define I2C_CR2_FREQ_Pos                    (0U)
#define I2C_CR2_FREQ_Msk                    (0x3FUL << I2C_CR2_FREQ_Pos)        /*!< 0x0000003F */
#define I2C_CR2_FREQ                        I2C_CR2_FREQ_Msk                   /*!< FREQ[5:0] bits (Peripheral Clock Frequency) */
#define I2C_CR2_ITERREN_Pos                 (8U)
#define I2C_CR2_ITERREN_Msk                 (0x1UL << I2C_CR2_ITERREN_Pos)      /*!< 0x00000100 */
#define I2C_CR2_ITERREN                     I2C_CR2_ITERREN_Msk                /*!< Error Interrupt Enable */
#define I2C_CR2_ITEVTEN_Pos                 (9U)
#define I2C_CR2_ITEVTEN_Msk                 (0x1UL << I2C_CR2_ITEVTEN_Pos)      /*!< 0x00000200 */
#define I2C_CR2_ITEVTEN                     I2C_CR2_ITEVTEN_Msk                /*!< Event Interrupt Enable */
#define I2C_CR2_ITBUFEN_Pos                 (10U)
#define I2C_CR2_ITBUFEN_Msk                 (0x1UL << I2C_CR2_ITBUFEN_Pos)      /*!< 0x00000400 */
#define I2C_CR2_ITBUFEN                     I2C_CR2_ITBUFEN_Msk                /*!< Buffer Interrupt Enable */
#define I2C_CR2_DMAEN_Pos                   (11U)
#define I2C_CR2_DMAEN_Msk                   (0x1UL << I2C_CR2_DMAEN_Pos)        /*!< 0x00000800 */
#define I2C_CR2_DMAEN                       I2C_CR2_DMAEN_Msk                  /*!< DMA Requests Enable */
#define I2C_CR2_LAST_Pos                    (12U)
#define I2C_CR2_LAST_Msk                    (0x1UL << I2C_CR2_LAST_Pos)         /*!< 0x00001000 */
#define I2C_CR2_LAST                        I2C_CR2_LAST_Msk                   /*!< DMA Last Transfer */
/*******************  Bit definition for I2C_OAR2 register  *******************/
#define I2C_OAR2_ENDUAL_Pos                 (0U)
#define I2C_OAR2_ENDUAL_Msk                 (0x1UL << I2C_OAR2_ENDUAL_Pos)      /*!< 0x00000001 */
#define I2C_OAR2_ENDUAL                     I2C_OAR2_ENDUAL_Msk                /*!< Dual addressing mode enable */
#define I2C_OAR2_ADD2_Pos                   (1U)
/*******************  Bit definition for I2C_SR1 register  ********************/
#define I2C_SR1_SB_Pos                      (0U)
#define I2C_SR1_SB_Msk                      (0x1UL << I2C_SR1_SB_Pos)           /*!< 0x00000001 */
#define I2C_SR1_SB                          I2C_SR1_SB_Msk                     /*!< Start Bit (Master mode) */
#define I2C_SR1_ADDR_Pos                    (1U)
#define I2C_SR1_ADDR_Msk                    (0x1UL << I2C_SR1_ADDR_Pos)         /*!< 0x00000002 */
#define I2C_SR1_ADDR                        I2C_SR1_ADDR_Msk                   /*!< Address sent (master mode)/matched (slave mode) */
#define I2C_SR1_BTF_Pos                     (2U)
#define I2C_SR1_BTF_Msk                     (0x1UL << I2C_SR1_BTF_Pos)          /*!< 0x00000004 */
#define I2C_SR1_BTF                         I2C_SR1_BTF_Msk                    /*!< Byte Transfer Finished */
#define I2C_SR1_ADD10_Pos                   (3U)
#define I2C_SR1_ADD10_Msk                   (0x1UL << I2C_SR1_ADD10_Pos)        /*!< 0x00000008 */
#define I2C_SR1_ADD10                       I2C_SR1_ADD10_Msk                  /*!< 10-bit header sent (Master mode) */
#define I2C_SR1_STOPF_Pos                   (4U)
#define I2C_SR1_STOPF_Msk                   (0x1UL << I2C_SR1_STOPF_Pos)        /*!< 0x00000010 */
#define I2C_SR1_STOPF                       I2C_SR1_STOPF_Msk                  /*!< Stop detection (Slave mode) */
#define I2C_SR1_RXNE_Pos                    (6U)
#define I2C_SR1_RXNE_Msk                    (0x1UL << I2C_SR1_RXNE_Pos)         /*!< 0x00000040 */
#define I2C_SR1_RXNE                        I2C_SR1_RXNE_Msk                   /*!< Data Register not Empty (receivers) */
#define I2C_SR1_TXE_Pos                     (7U)
#define I2C_SR1_TXE_Msk                     (0x1UL << I2C_SR1_TXE_Pos)          /*!< 0x00000080 */
#define I2C_SR1_TXE                         I2C_SR1_TXE_Msk                    /*!< Data Register Empty (transmitters) */
#define I2C_SR1_BERR_Pos                    (8U)
#define I2C_SR1_BERR_Msk                    (0x1UL << I2C_SR1_BERR_Pos)         /*!< 0x00000100 */
#define I2C_SR1_BERR                        I2C_SR1_BERR_Msk                   /*!< Bus Error */
#define I2C_SR1_ARLO_Pos                    (9U)
#define I2C_SR1_ARLO_Msk                    (0x1UL << I2C_SR1_ARLO_Pos)         /*!< 0x00000200 */
#define I2C_SR1_ARLO                        I2C_SR1_ARLO_Msk                   /*!< Arbitration Lost (master mode) */
#define I2C_SR1_AF_Pos                      (10U)
#define I2C_SR1_AF_Msk                      (0x1UL << I2C_SR1_AF_Pos)           /*!< 0x00000400 */
#define I2C_SR1_AF                          I2C_SR1_AF_Msk                     /*!< Acknowledge Failure */
#define I2C_SR1_OVR_Pos                     (11U)
#define I2C_SR1_OVR_Msk                     (0x1UL << I2C_SR1_OVR_Pos)          /*!< 0x00000800 */
#define I2C_SR1_OVR                         I2C_SR1_OVR_Msk                    /*!< Overrun/Underrun */
#define I2C_SR1_PECERR_Pos                  (12U)
#define I2C_SR1_PECERR_Msk                  (0x1UL << I2C_SR1_PECERR_Pos)       /*!< 0x00001000 */
#define I2C_SR1_PECERR                      I2C_SR1_PECERR_Msk                 /*!< PEC Error in reception */
#define I2C_SR1_TIMEOUT_Pos                 (14U)
#define I2C_SR1_TIMEOUT_Msk                 (0x1UL << I2C_SR1_TIMEOUT_Pos)      /*!< 0x00004000 */
#define I2C_SR1_TIMEOUT                     I2C_SR1_TIMEOUT_Msk                /*!< Timeout or Tlow Error */
#define I2C_SR1_SMBALERT_Pos                (15U)
#define I2C_SR1_SMBALERT_Msk                (0x1UL << I2C_SR1_SMBALERT_Pos)     /*!< 0x00008000 */
#define I2C_SR1_SMBALERT                    I2C_SR1_SMBALERT_Msk               /*!< SMBus Alert */

/*******************  Bit definition for I2C_SR2 register  ********************/
#define I2C_SR2_MSL_Pos                     (0U)
#define I2C_SR2_MSL_Msk                     (0x1UL << I2C_SR2_MSL_Pos)          /*!< 0x00000001 */
#define I2C_SR2_MSL                         I2C_SR2_MSL_Msk                    /*!< Master/Slave */
#define I2C_SR2_BUSY_Pos                    (1U)
#define I2C_SR2_BUSY_Msk                    (0x1UL << I2C_SR2_BUSY_Pos)         /*!< 0x00000002 */
#define I2C_SR2_BUSY                        I2C_SR2_BUSY_Msk                   /*!< Bus Busy */
#define I2C_SR2_TRA_Pos                     (2U)
#define I2C_SR2_TRA_Msk                     (0x1UL << I2C_SR2_TRA_Pos)          /*!< 0x00000004 */
#define I2C_SR2_TRA                         I2C_SR2_TRA_Msk                    /*!< Transmitter/Receiver */
#define I2C_SR2_GENCALL_Pos                 (4U)
#define I2C_SR2_GENCALL_Msk                 (0x1UL << I2C_SR2_GENCALL_Pos)      /*!< 0x00000010 */
#define I2C_SR2_GENCALL                     I2C_SR2_GENCALL_Msk                /*!< General Call Address (Slave mode) */
#define I2C_SR2_SMBDEFAULT_Pos              (5U)
#define I2C_SR2_SMBDEFAULT_Msk              (0x1UL << I2C_SR2_SMBDEFAULT_Pos)   /*!< 0x00000020 */
#define I2C_SR2_SMBDEFAULT                  I2C_SR2_SMBDEFAULT_Msk             /*!< SMBus Device Default Address (Slave mode) */
#define I2C_SR2_SMBHOST_Pos                 (6U)
#define I2C_SR2_SMBHOST_Msk                 (0x1UL << I2C_SR2_SMBHOST_Pos)      /*!< 0x00000040 */
#define I2C_SR2_SMBHOST                     I2C_SR2_SMBHOST_Msk                /*!< SMBus Host Header (Slave mode) */
#define I2C_SR2_DUALF_Pos                   (7U)
#define I2C_SR2_DUALF_Msk                   (0x1UL << I2C_SR2_DUALF_Pos)        /*!< 0x00000080 */
#define I2C_SR2_DUALF                       I2C_SR2_DUALF_Msk                  /*!< Dual Flag (Slave mode) */
#define I2C_SR2_PEC_Pos                     (8U)
#define I2C_SR2_PEC_Msk                     (0xFFUL << I2C_SR2_PEC_Pos)         /*!< 0x0000FF00 */
#define I2C_SR2_PEC                         I2C_SR2_PEC_Msk                    /*!< Packet Error Checking Register */
#endif /* STM32F103X6_H_ */
