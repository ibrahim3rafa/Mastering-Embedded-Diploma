
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000042c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  08000564  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00010564  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00010564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  08000564  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000564  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000564  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001946  00000000  00000000  0001058d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000040f  00000000  00000000  00011ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003fc  00000000  00000000  000122e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00012798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fe7  00000000  00000000  00012828  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000dce  00000000  00000000  0001480f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008951  00000000  00000000  000155dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001df2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000218  00000000  00000000  0001dfac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000544 	.word	0x08000544

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000544 	.word	0x08000544

08000170 <GPIO_CRLH_PIN_POSITION>:
 *      Author: ARAFA
 */
#include"STM32F103C6_gpio_driver.h"
#include "STM32F103x6.h"

uint16_t GPIO_CRLH_PIN_POSITION(uint16_t pinNumber){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <GPIO_CRLH_PIN_POSITION+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <GPIO_CRLH_PIN_POSITION+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <GPIO_CRLH_PIN_POSITION+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <GPIO_CRLH_PIN_POSITION+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <GPIO_CRLH_PIN_POSITION+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <GPIO_CRLH_PIN_POSITION+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <GPIO_CRLH_PIN_POSITION+0x7a>
 8000198:	e047      	b.n	800022a <GPIO_CRLH_PIN_POSITION+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <GPIO_CRLH_PIN_POSITION+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <GPIO_CRLH_PIN_POSITION+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <GPIO_CRLH_PIN_POSITION+0x8a>
 80001a6:	e040      	b.n	800022a <GPIO_CRLH_PIN_POSITION+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <GPIO_CRLH_PIN_POSITION+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <GPIO_CRLH_PIN_POSITION+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <GPIO_CRLH_PIN_POSITION+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <GPIO_CRLH_PIN_POSITION+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <GPIO_CRLH_PIN_POSITION+0x9a>
 80001c6:	e030      	b.n	800022a <GPIO_CRLH_PIN_POSITION+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <GPIO_CRLH_PIN_POSITION+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <GPIO_CRLH_PIN_POSITION+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <GPIO_CRLH_PIN_POSITION+0xaa>
 80001da:	e026      	b.n	800022a <GPIO_CRLH_PIN_POSITION+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <GPIO_CRLH_PIN_POSITION+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <GPIO_CRLH_PIN_POSITION+0xb6>
 80001e8:	e01f      	b.n	800022a <GPIO_CRLH_PIN_POSITION+0xba>
	case GPIO_PIN_0 :
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
	case GPIO_PIN_8 :
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <GPIO_CRLH_PIN_POSITION+0xbc>

	}

	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_init>:
 * @retval						-none
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_GPIO_init(GPIO_typedefConfig* GPIOx, GPIO_pinConfig* pinConfig){
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]

	//port configuration register low (pins from 0 >> 7 )	GPIOx_CRL
	//port configuration register high (pins from 8 >> 15 )	GPIOx_CRH
	volatile uint32_t * configRegister = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Conf = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	configRegister = (pinConfig->GPIO_PinNum)<GPIO_PIN_8 ? &GPIOx->CRL : &GPIOx->CRH;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	2bff      	cmp	r3, #255	; 0xff
 8000250:	d801      	bhi.n	8000256 <MCAL_GPIO_init+0x20>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	e001      	b.n	800025a <MCAL_GPIO_init+0x24>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3304      	adds	r3, #4
 800025a:	60bb      	str	r3, [r7, #8]

	//Clear CNFx[1:0] and MODEx[1:0]
	(*configRegister) &= ~(0xf<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	b29b      	uxth	r3, r3
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff84 	bl	8000170 <GPIO_CRLH_PIN_POSITION>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	230f      	movs	r3, #15
 800026e:	4093      	lsls	r3, r2
 8000270:	43da      	mvns	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	401a      	ands	r2, r3
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(pinConfig->GPIO_PinMode == OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == OUTPUT_PUSH_PULL_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_PUSH_PULL_MODE){
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2b05      	cmp	r3, #5
 8000284:	d00e      	beq.n	80002a4 <MCAL_GPIO_init+0x6e>
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2b04      	cmp	r3, #4
 800028e:	d009      	beq.n	80002a4 <MCAL_GPIO_init+0x6e>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b07      	cmp	r3, #7
 8000298:	d004      	beq.n	80002a4 <MCAL_GPIO_init+0x6e>
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b06      	cmp	r3, #6
 80002a2:	d110      	bne.n	80002c6 <MCAL_GPIO_init+0x90>

		//configure pin CNF and MODE
		Pin_Conf = (((pinConfig->GPIO_PinMode-4) << 2) | ((pinConfig->GPIO_Output_Speed )& 0x0f));
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	789b      	ldrb	r3, [r3, #2]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	3b04      	subs	r3, #4
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	b25a      	sxtb	r2, r3
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	f003 030f 	and.w	r3, r3, #15
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	4313      	orrs	r3, r2
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	73fb      	strb	r3, [r7, #15]
 80002c4:	e039      	b.n	800033a <MCAL_GPIO_init+0x104>

	}else{	//if pin is input
		if (pinConfig -> GPIO_PinMode == INPUT_ANLOG_MODE || pinConfig->GPIO_PinMode == INPUT_FLOATING_MODE){
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d004      	beq.n	80002da <MCAL_GPIO_init+0xa4>
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d108      	bne.n	80002ec <MCAL_GPIO_init+0xb6>
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x0) & 0x0f;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	789b      	ldrb	r3, [r3, #2]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	f003 030f 	and.w	r3, r3, #15
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	e026      	b.n	800033a <MCAL_GPIO_init+0x104>
		}else if (pinConfig -> GPIO_PinMode == AF_INPUT_FLOATING_MODE){ //Input Floating
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	789b      	ldrb	r3, [r3, #2]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b08      	cmp	r3, #8
 80002f4:	d102      	bne.n	80002fc <MCAL_GPIO_init+0xc6>
			Pin_Conf = ((INPUT_FLOATING_MODE<<2) | 0x0) & 0x0f;
 80002f6:	2304      	movs	r3, #4
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e01e      	b.n	800033a <MCAL_GPIO_init+0x104>
		}else{		//Input PU PD
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x0) & 0x0f;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	789b      	ldrb	r3, [r3, #2]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	73fb      	strb	r3, [r7, #15]

			if(pinConfig->GPIO_PinMode == INPUT_PULL_UP_MODE){
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	789b      	ldrb	r3, [r3, #2]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2b02      	cmp	r3, #2
 8000314:	d108      	bne.n	8000328 <MCAL_GPIO_init+0xf2>
				GPIOx->ODR |= pinConfig->GPIO_PinNum;
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	b29a      	uxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	e008      	b.n	800033a <MCAL_GPIO_init+0x104>
			}else{
				GPIOx->ODR &= ~(pinConfig->GPIO_PinNum);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	b29b      	uxth	r3, r3
 800032e:	43da      	mvns	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	401a      	ands	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on the register
	*configRegister |= ((Pin_Conf)<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
 800033a:	7bfc      	ldrb	r4, [r7, #15]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	881b      	ldrh	r3, [r3, #0]
 8000340:	b29b      	uxth	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff14 	bl	8000170 <GPIO_CRLH_PIN_POSITION>
 8000348:	4603      	mov	r3, r0
 800034a:	fa04 f203 	lsl.w	r2, r4, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	431a      	orrs	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bd90      	pop	{r4, r7, pc}

08000360 <MCAL_GPIO_Read_Pin>:
 * @retval						-The value was read from the pin
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
uint8_t MCAL_GPIO_Read_Pin(GPIO_typedefConfig* GPIOx, uint16_t pinNumber){
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	807b      	strh	r3, [r7, #2]
	uint8_t pin_val ;
	pin_val = (uint8_t) (GPIOx->IDR & pinNumber);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4013      	ands	r3, r2
 8000378:	73fb      	strb	r3, [r7, #15]
	return pin_val;
 800037a:	7bfb      	ldrb	r3, [r7, #15]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr

08000386 <MCAL_GPIO_Toggle_Pin>:
 * @Param [in]					-pinNumber : The number of pin to be Toggled
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_GPIO_Toggle_Pin(GPIO_typedefConfig* GPIOx, uint16_t pinNumber){
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	460b      	mov	r3, r1
 8000390:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= pinNumber;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68da      	ldr	r2, [r3, #12]
 8000396:	887b      	ldrh	r3, [r7, #2]
 8000398:	405a      	eors	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	60da      	str	r2, [r3, #12]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <clock_init>:
#include"STM32F103x6.h"
#include"stdio.h"



void clock_init(void){
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
	//	Bit 2 IOPAEN: IO port A clock enable
	//	Set and cleared by software.
	//	0: IO port A clock disabled
	//	1: IO port A clock enabled

	RCC_GPIOA_CLK_EN();
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <clock_init+0x24>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a06      	ldr	r2, [pc, #24]	; (80003cc <clock_init+0x24>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]

	//	Bit 3 IOPBEN: IO port B clock enable
	//	Set and cleared by software.
	//	0: IO port B clock disabled
	//	1: IO port B clock enabled
	RCC_GPIOB_CLK_EN();
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <clock_init+0x24>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a03      	ldr	r2, [pc, #12]	; (80003cc <clock_init+0x24>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]

}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <GPIO_Init>:

void GPIO_Init(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

	//PA1 input pin
	 // input mode
	 //01: Floating input (reset state)
	GPIO_pinConfig pinCFG;
	pinCFG.GPIO_PinNum = GPIO_PIN_1;
 80003d6:	2302      	movs	r3, #2
 80003d8:	80bb      	strh	r3, [r7, #4]
	pinCFG.GPIO_PinMode= INPUT_FLOATING_MODE;
 80003da:	2301      	movs	r3, #1
 80003dc:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(GPIOA,&pinCFG);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <GPIO_Init+0x64>)
 80003e4:	f7ff ff27 	bl	8000236 <MCAL_GPIO_init>

	//PA13 input pin
	// input mode
 //01: Floating input (reset state)
//	GPIO_pinConfig* pinCFG;
	pinCFG.GPIO_PinNum = GPIO_PIN_13;
 80003e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ec:	80bb      	strh	r3, [r7, #4]
	pinCFG.GPIO_PinMode= INPUT_FLOATING_MODE;
 80003ee:	2301      	movs	r3, #1
 80003f0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(GPIOA,&pinCFG);
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4619      	mov	r1, r3
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <GPIO_Init+0x64>)
 80003f8:	f7ff ff1d 	bl	8000236 <MCAL_GPIO_init>

	// PB1 is output push-pull pin
  //01: Output mode, max speed 10 MHz
   //00: General purpose output push-pull
//	GPIO_pinConfig* pinCFG;
	pinCFG.GPIO_PinNum = GPIO_PIN_1;
 80003fc:	2302      	movs	r3, #2
 80003fe:	80bb      	strh	r3, [r7, #4]
	pinCFG.GPIO_PinMode= OUTPUT_PUSH_PULL_MODE;
 8000400:	2304      	movs	r3, #4
 8000402:	71bb      	strb	r3, [r7, #6]
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 8000404:	2301      	movs	r3, #1
 8000406:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB,&pinCFG);
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4619      	mov	r1, r3
 800040c:	480a      	ldr	r0, [pc, #40]	; (8000438 <GPIO_Init+0x68>)
 800040e:	f7ff ff12 	bl	8000236 <MCAL_GPIO_init>

	// PB13 is output push-pull pin
	   //01: Output mode, max speed 10 MHz
  //00: General purpose output push-pull
//	GPIO_pinConfig* pinCFG;
	pinCFG.GPIO_PinNum = GPIO_PIN_13;
 8000412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000416:	80bb      	strh	r3, [r7, #4]
	pinCFG.GPIO_PinMode= OUTPUT_PUSH_PULL_MODE;
 8000418:	2304      	movs	r3, #4
 800041a:	71bb      	strb	r3, [r7, #6]
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
 800041c:	2301      	movs	r3, #1
 800041e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init(GPIOB,&pinCFG);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <GPIO_Init+0x68>)
 8000426:	f7ff ff06 	bl	8000236 <MCAL_GPIO_init>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40010800 	.word	0x40010800
 8000438:	40010c00 	.word	0x40010c00

0800043c <main>:

int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	clock_init();
 8000442:	f7ff ffb1 	bl	80003a8 <clock_init>
	GPIO_Init();
 8000446:	f7ff ffc3 	bl	80003d0 <GPIO_Init>

	while(1){

		if(!(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1))){
 800044a:	2102      	movs	r1, #2
 800044c:	4814      	ldr	r0, [pc, #80]	; (80004a0 <main+0x64>)
 800044e:	f7ff ff87 	bl	8000360 <MCAL_GPIO_Read_Pin>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d10b      	bne.n	8000470 <main+0x34>
			MCAL_GPIO_Toggle_Pin(GPIOB, GPIO_PIN_1);  //toggle PB1
 8000458:	2102      	movs	r1, #2
 800045a:	4812      	ldr	r0, [pc, #72]	; (80004a4 <main+0x68>)
 800045c:	f7ff ff93 	bl	8000386 <MCAL_GPIO_Toggle_Pin>
			while(!(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1)));
 8000460:	bf00      	nop
 8000462:	2102      	movs	r1, #2
 8000464:	480e      	ldr	r0, [pc, #56]	; (80004a0 <main+0x64>)
 8000466:	f7ff ff7b 	bl	8000360 <MCAL_GPIO_Read_Pin>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f8      	beq.n	8000462 <main+0x26>
		}

		if(!(MCAL_GPIO_Read_Pin(GPIOA,GPIO_PIN_13))){
 8000470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <main+0x64>)
 8000476:	f7ff ff73 	bl	8000360 <MCAL_GPIO_Read_Pin>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d104      	bne.n	800048a <main+0x4e>
			MCAL_GPIO_Toggle_Pin(GPIOB, GPIO_PIN_13); //toggle PB1
 8000480:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <main+0x68>)
 8000486:	f7ff ff7e 	bl	8000386 <MCAL_GPIO_Toggle_Pin>

		}

		for(int i=0 ; i<255 ; i++);
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	e002      	b.n	8000496 <main+0x5a>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3301      	adds	r3, #1
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2bfe      	cmp	r3, #254	; 0xfe
 800049a:	ddf9      	ble.n	8000490 <main+0x54>
		if(!(MCAL_GPIO_Read_Pin(GPIOA, GPIO_PIN_1))){
 800049c:	e7d5      	b.n	800044a <main+0xe>
 800049e:	bf00      	nop
 80004a0:	40010800 	.word	0x40010800
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff ffaf 	bl	800043c <main>

080004de <LoopForever>:

LoopForever:
    b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ec:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2500      	movs	r5, #0
 8000500:	4e0c      	ldr	r6, [pc, #48]	; (8000534 <__libc_init_array+0x38>)
 8000502:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000504:	1ba4      	subs	r4, r4, r6
 8000506:	10a4      	asrs	r4, r4, #2
 8000508:	42a5      	cmp	r5, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	f000 f81a 	bl	8000544 <_init>
 8000510:	2500      	movs	r5, #0
 8000512:	4e0a      	ldr	r6, [pc, #40]	; (800053c <__libc_init_array+0x40>)
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <__libc_init_array+0x44>)
 8000516:	1ba4      	subs	r4, r4, r6
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	42a5      	cmp	r5, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000524:	4798      	blx	r3
 8000526:	3501      	adds	r5, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800052e:	4798      	blx	r3
 8000530:	3501      	adds	r5, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
