/*
 * STM32F103C6_gpio_driver.c
 *
 *  Created on: Jul 30, 2023
 *      Author: ARAFA
 */
#include"STM32F103C6_gpio_driver.h"
#include "STM32F103x6.h"

uint16_t GPIO_CRLH_PIN_POSITION(uint16_t pinNumber){
	switch(pinNumber){
	case GPIO_PIN_0 :
		return 0;
		break;
	case GPIO_PIN_1 :
		return 4;
		break;
	case GPIO_PIN_2 :
		return 8;
		break;
	case GPIO_PIN_3 :
		return 12;
		break;
	case GPIO_PIN_4 :
		return 16;
		break;
	case GPIO_PIN_5 :
		return 20;
		break;
	case GPIO_PIN_6 :
		return 24;
		break;
	case GPIO_PIN_7 :
		return 28;
	case GPIO_PIN_8 :
		return 0;
		break;
	case GPIO_PIN_9 :
		return 4;
		break;
	case GPIO_PIN_10 :
		return 8;
		break;
	case GPIO_PIN_11 :
		return 12;
		break;
	case GPIO_PIN_12 :
		return 16;
		break;
	case GPIO_PIN_13 :
		return 20;
		break;
	case GPIO_PIN_14 :
		return 24;
		break;
	case GPIO_PIN_15 :
		return 28;

	}

	return 0;
}


/*************************************************************************************
 * @Fn							-MCAL_GPIO_init
 * @Brief						-Initialize the GPIOx Piny according to the specified parameters in the pinconfig
 * @Param [in]					-GPIOx: where x can be (A---E depending on device mode) to select the GPIO Peripherals
 * @Param [in] 					-pinConfig : pointer to GPIO_pinConfig struct that contains information about specefied
 * 								GPIO pin
 * @retval						-none
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_GPIO_init(GPIO_typedefConfig* GPIOx, GPIO_pinConfig* pinConfig){

	//port configuration register low (pins from 0 >> 7 )	GPIOx_CRL
	//port configuration register high (pins from 8 >> 15 )	GPIOx_CRH
	volatile uint32_t * configRegister = NULL;
	uint8_t Pin_Conf = 0;

	configRegister = (pinConfig->GPIO_PinNum)<GPIO_PIN_8 ? &GPIOx->CRL : &GPIOx->CRH;

	//Clear CNFx[1:0] and MODEx[1:0]
	(*configRegister) &= ~(0xf<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));

	// if pin is output
	if(pinConfig->GPIO_PinMode == OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == OUTPUT_PUSH_PULL_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_OPEN_DRAIN_MODE || pinConfig->GPIO_PinMode == AF_OUTPUT_PUSH_PULL_MODE){

		//configure pin CNF and MODE
		Pin_Conf = ((pinConfig->GPIO_PinMode-4 << 2) | ((pinConfig->GPIO_Output_Speed )& 0x0f));

	}else{	//if pin is input
		if (pinConfig -> GPIO_PinMode == INPUT_ANLOG_MODE || pinConfig->GPIO_PinMode == INPUT_FLOATING_MODE){
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x0) & 0x0f;
		}else if (pinConfig -> GPIO_PinMode == AF_INPUT_FLOATING_MODE){ //Input Floating
			Pin_Conf = ((INPUT_FLOATING_MODE<<2) | 0x0) & 0x0f;
		}else{		//Input PU PD
			Pin_Conf = ((pinConfig->GPIO_PinMode<<2) | 0x0) & 0x0f;

			if(pinConfig->GPIO_PinMode == INPUT_PULL_UP_MODE){
				GPIOx->ODR |= pinConfig->GPIO_PinNum;
			}else{
				GPIOx->ODR &= ~(pinConfig->GPIO_PinNum);
			}

		}
	}
	//write on the register
	*configRegister |= ((Pin_Conf)<<GPIO_CRLH_PIN_POSITION(pinConfig->GPIO_PinNum));
}





/*************************************************************************************
 * @Fn							-MCAL_GPIO_Deinit
 * @Brief						-reset all the gpio registers
 * @Param [in]					-GPIOx: where x can be (A---E depending on device mode) to select the GPIO Peripherals
 * @retval						-none
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */

void MCAL_GPIO_Deinit(GPIO_typedefConfig* GPIOx){

	//Reset all regs.
	GPIOx->BRR = 0x00000000;
	GPIOx->BSRR =0x00000000;
	GPIOx->CRH =0x44444444;
	GPIOx->CRL = 0x44444444;
	GPIOx->IDR =0x0;
	GPIOx->LCKR =0x00000000;
	GPIOx->ODR =0x00000000;


	//using RCC_APB2RSTR

	if(GPIOx == GPIOA){
		RCC->
	}

}

void MCAL_GPIO_Write_Port(GPIO_typedefConfig* GPIOx, uint16_t value);
void MCAL_GPIO_Write_Pin(GPIO_typedefConfig* GPIOx, uint16_t pinNumber , uint8_t value);

uint16_t MCAL_GPIO_Read_Port(GPIO_typedefConfig* GPIOx);
uint8_t MCAL_GPIO_Read_Pin(GPIO_typedefConfig* GPIOx, uint16_t pinNumber);

void MCAL_GPIO_Toggle_Pin(GPIO_typedefConfig* GPIOx, uint16_t pinNumber);

void MCAL_GPIO_Lock_Pin(GPIO_typedefConfig* GPIOx, uint16_t pinNumber);



