/*
 * STM32F103C6_EXTI_driver.c
 *
 *  Created on: Aug 4, 2023
 *      Author: ARAFA
 */


#include <EXTI_driver.h>
#include <GPIO_driver.h>
#include "STM32F103x6.h"


void (*P_EXTI_CallBack[15])(void);

#define AFIO_EXTI_Position_Mapping(x)  		(       x==0?PAx_PIN: \
		x==1?PBx_PIN: \
				x==2?PCx_PIN: \
						x==3?PDx_PIN: 0      )



void Update_EXTI_GPIO(EXTI_pinConfig_t* EXTI_CFG){

	//UPDATE pin configuration as input floating
	GPIO_pinConfig PIN_CFG;
	PIN_CFG.GPIO_PinNum = EXTI_CFG->EXTI_PIN.EXTI_pinNumber;
	PIN_CFG.GPIO_PinMode = AF_INPUT_FLOATING_MODE;
	MCAL_GPIO_init(&(EXTI_CFG->EXTI_PIN.GPIOx), &PIN_CFG);

	//UPDATE EXTI Interrupt Configuration Register settings (AFIO)

	uint8_t EXTI_AFIO_Index = (uint8_t) (EXTI_CFG->EXTI_PIN.EXTI_line) / 4;

	uint8_t EXTI_AFIO_position = (uint8_t) (EXTI_AFIO_Index % 4)*4;

	AFIO->EXTICR1[EXTI_AFIO_Index] &= ~(0xF<<AFIO_EXTI_Position_Mapping(EXTI_AFIO_position));

	AFIO->EXTICR1[EXTI_AFIO_Index]  |= (0xF<<AFIO_EXTI_Position_Mapping(EXTI_AFIO_position));

	//UPDATE Trigger Mode
	EXTI->RTSR &= ~(1<<EXTI_CFG->EXTI_PIN.EXTI_line) ;
	EXTI->FTSR &= ~(1<<EXTI_CFG->EXTI_PIN.EXTI_line) ;

	if(EXTI_CFG->EXTI_Trigger == EXTI_Trigger_Mode_Rising){
		EXTI->RTSR |= (1<<EXTI_CFG->EXTI_PIN.EXTI_line) ;
	}else if (EXTI_CFG->EXTI_Trigger == EXTI_Trigger_Mode_Falling){
		EXTI->FTSR |= (1<<EXTI_CFG->EXTI_PIN.EXTI_line) ;

	}else {   //Falling and Rising
		EXTI->RTSR |= (1<<EXTI_CFG->EXTI_PIN.EXTI_line) ;
		EXTI->FTSR |= (1<<EXTI_CFG->EXTI_PIN.EXTI_line) ;
	}

	//	UPADATE NVIC
	NVIC_EXTI0_IRQ_Disable;
	NVIC_EXTI1_IRQ_Disable;
	NVIC_EXTI2_IRQ_Disable;
	NVIC_EXTI3_IRQ_Disable;
	NVIC_EXTI4_IRQ_Disable;
	NVIC_EXTI9_5_IRQ_Disable;
	NVIC_EXTI15_10_IRQ_Disable;

	switch(EXTI_CFG->EXTI_PIN.EXTI_line){
	case EXTI0:
		NVIC_EXTI0_IRQ_Enable;
		break;
	case EXTI1:
		NVIC_EXTI1_IRQ_Enable;
		break;
	case EXTI2:
		NVIC_EXTI2_IRQ_Enable;
		break;
	case EXTI3:
		NVIC_EXTI3_IRQ_Enable;
		break;
	case EXTI4:
		NVIC_EXTI4_IRQ_Enable;
		break;
	case EXTI5:
	case EXTI6:
	case EXTI7:
	case EXTI8:
	case EXTI9:
		NVIC_EXTI9_5_IRQ_Enable;
		break;
	case EXTI10:
	case EXTI11:
	case EXTI12:
	case EXTI13:
	case EXTI14:
	case EXTI15:
		NVIC_EXTI15_10_IRQ_Enable;
		break;
	default :
		break;
	}

	//UPDATE GP
	for(uint8_t i = 0 ; i<16 ; i++){
		switch(EXTI_PIN.EXTI_line){
		case EXTI0:
			EXTI0_IRQHandler();
			break;
		case EXTI1:
			EXTI1_IRQHandler();
			break;
		case EXTI2:
			EXTI2_IRQHandler();
			break;
		case EXTI3:
			EXTI3_IRQHandler();
			break;
		case EXTI4:
			EXTI4_IRQHandler();
			break;
		case EXTI5:
		case EXTI6:
		case EXTI7:
		case EXTI8:
		case EXTI9:
			EXTI9_5_IRQHandler();
			break;
		case EXTI10:
		case EXTI11:
		case EXTI12:
		case EXTI13:
		case EXTI14:
		case EXTI15:
			EXTI15_10_IRQHandler();
			break;
		default :
			break;
		}

	}
}

}





/********************************************************************************************************************************
 *->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EXTI API'S  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 *********************************************************************************************************************************/




/*************************************************************************************
 * @Fn							-MCAL_EXTI_GPIO_Init
 * @Brief						-Configure settings required to generate interrupt
 * @Param [in]					-EXTI_CFG: select (EXTIx, GPIOy , GPIO_PIN_x , EXTIx_IRQ) x-->[1-15] && y[A,B,C,D]
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_EXTI_GPIO_Init(EXTI_pinConfig_t* EXTI_CFG){

	Update_EXTI_GPIO(EXTI_CFG);
}


/*************************************************************************************
 * @Fn							-MCAL_EXTI_GPIO_DeInit
 * @Brief						-Configure settings required to Reset
 * @Param [in]					-EXTI_CFG: select (EXTIx, GPIOy , GPIO_PIN_x , EXTIx_IRQ) x-->[1-15] && y[A,B,C,D]
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_EXTI_GPIO_DeInit(void){
	/*	Reset all EXTI_REGISTERS */
	EXTI->IMR   =	 0x00000000;
	EXTI->EMR   = 	 0x00000000;
	EXTI->RTSR  = 	 0x00000000;
	EXTI->FTSR  =	 0x00000000;
	EXTI->SWIER =	 0x00000000;
	EXTI->PR    = 	 0x00000000;

	/*	Reset all NVIC Registers*/

	NVIC_ICER0 = NVIC_EXTI0_IRQ_Disable ;
	NVIC_ICER0 = NVIC_EXTI1_IRQ_Disable ;
	NVIC_ICER0 = NVIC_EXTI2_IRQ_Disable ;
	NVIC_ICER0 = NVIC_EXTI3_IRQ_Disable ;
	NVIC_ICER0 = NVIC_EXTI4_IRQ_Disable ;
	NVIC_ICER0 = NVIC_EXTI9_5_IRQ_Disable ;
	NVIC_ICER1 = NVIC_EXTI15_10_IRQ_Disable ;

}



/*************************************************************************************
 * @Fn							-MCAL_EXTI_GPIO_Update
 * @Brief						-Configure Updated settings required to generate interrupt
 * @Param [in]					-EXTI_CFG: select (EXTIx, GPIOy , GPIO_PIN_x , EXTIx_IRQ) x-->[1-15] && y[A,B,C,D]
 * @Note						-stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 								But LQFP48 package has only GPIO A,B part of C,D exported as PINS from the MCU
 *
 */
void MCAL_EXTI_GPIO_Update(EXTI_pinConfig_t* EXTI_CFG)
{
	Update_EXTI_GPIO(EXTI_CFG);
}














/* EXTI Line0 interrupt                             */
void EXTI0_IRQHandler(){

}


/* EXTI Line1interrupt                             */
void EXTI1_IRQHandler(){

}

/* EXTI Line2 interrupt                             */
void EXTI2_IRQHandler(){

}

/* EXTI Line3 interrupt                             */
void EXTI3_IRQHandler(){

}

/* EXTI Line4 interrupt                             */
void EXTI4_IRQHandler(){

}

/* EXTI Line[9:5] interrupts                        */
void EXTI9_5_IRQHandler(){

}

/* EXTI Line[15:10] interrupts                      */
void EXTI15_10_IRQHandler(){

}
