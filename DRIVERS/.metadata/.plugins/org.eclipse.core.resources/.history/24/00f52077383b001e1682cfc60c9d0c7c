/*
 * USART.c
 *
 *  Created on: Aug 14, 2023
 *      Author: ARAFA
 */


#include"USART.h"
#include"RCC.h"
#include"EXTI_driver.h"

//Generic ptr to be used in funcs
UART_Config * GP_UART_Config = NULL;



/**================================================================
 * @Fn					- MCAL_UART_Init
 * @brief 				- Initializes UART (Supported feature : ASYNCHRONOUS only)
 * @param [in] 			- USARTx: where x can be (1..3) depending on the device used
 * @param [in] 			- UARTCfg: All the UART configurations
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */

void MCAL_UART_Init(USART_typedef* USARTx, UART_Config * UARTCfg){
	GP_UART_Config = UARTCfg;    //Backup

	uint32_t BRR,PCLCK;

	//Enable clock
	if(USARTx == USART1){
		RCC_USART1_CLK_Enable();
	}else if (USARTx == USART2){
		RCC_USART2_CLK_Enable();
	}else if(USARTx == USART3){
		RCC_USART3_CLK_Enable();
	}

	//Enable usart UE bit in USART_CR1
	USARTx->CR1 |= (1<<13);

	//programin M Bit in USART_CR1
	USARTx->CR1 |= UARTCfg->Word_Lenght;

	//stop Bits
	USARTx->CR2 |= UARTCfg->StopBits;

	//select desired buadrate
	if(USARTx == USART1){
		PCLCK = MCAL_RCC_GetPCLK2_CLCKFreq();
	}else if (USARTx == USART2){
		PCLCK = MCAL_RCC_GetPCLK1_CLCKFreq();
	}
	BRR = UART_BRR_Register(PCLCK,UARTCfg->BuadRate);
	USARTx->BRR = BRR;

	//select desired stop bit
	USARTx->CR2 |= UARTCfg->StopBits;

	//Select Parity bit
	USARTx->CR1 |= UARTCfg->Parity;

	//Select HWFlow CTRl
	USARTx->CR3 |= UARTCfg->HWFlowCtl;

	//select TX/Rx MOde
	USARTx->CR1 |= UARTCfg->USART_Mode;

	//select between interrupt and polling
	if(UARTCfg->IRQ_Enable != UART_IRQ_Enable_NONE){
		USARTx->CR1 |= UARTCfg->IRQ_Enable;

		if(USARTx == USART1){
			NVIC_
		}
	}
}
void MCAL_UART_DeInit(USART_typedef* USART);
void MCAL_UART_GPIO_SetPins(USART_typedef* USARTx);
void MCAL_UART_SendDate(USART_typedef* USARTx, uint16_t* pTXBuffer, enum polling_Mechanism PollingState);
void MCAL_UART_RecieveDate(USART_typedef* USARTx, uint16_t* pTXBuffer, enum polling_Mechanism PollingState);
void MCAL_UART_WAIT_TC(USART_typedef* USARTx);
