/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#include "../STM32F103C6_drivers/inc/STM32F103C6_gpio_driver.h"
#include"../STM32F103C6_drivers/inc/STM32F103x6.h"
#include"lcd.h"
#include "keypad.h"


#define ZERO 0x01
#define ONE 0x79
#define TWO 0x24
#define THREE 0x30
#define FOUR 0x4C
#define FIVE 0x12
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init(void){
	//	Bit 2 IOPAEN: IO port A clock enable
	//	Set and cleared by software.
	//	0: IO port A clock disabled
	//	1: IO port A clock enabled

	RCC_GPIOA_CLK_EN();


	//	Bit 3 IOPBEN: IO port B clock enable
	//	Set and cleared by software.
	//	0: IO port B clock disabled
	//	1: IO port B clock enabled
	RCC_GPIOB_CLK_EN();

}
GPIO_pinConfig pinCFG;
void GPIO_init(){

	//setting gpio configuration pins for 7seg

	pinCFG.GPIO_PinNum = GPIO_PIN_9;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

	pinCFG.GPIO_PinNum = GPIO_PIN_10;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

	pinCFG.GPIO_PinNum = GPIO_PIN_11;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

	pinCFG.GPIO_PinNum = GPIO_PIN_12;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

	pinCFG.GPIO_PinNum = GPIO_PIN_13;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

	pinCFG.GPIO_PinNum = GPIO_PIN_14;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

	pinCFG.GPIO_PinNum = GPIO_PIN_15;
	pinCFG.GPIO_PinMode = OUTPUT_PUSH_PULL_MODE;
	pinCFG.GPIO_Output_Speed = GPIO_SPEED_10MHZ;
	MCAL_GPIO_init(KEYPAD_PORT, &pinCFG);

}


void wait_mss(uint32_t time){
	uint32_t i,j ;
	for(i=0 ; i<time ; i++){
		for(j=0 ; j<255; j++);
	}
}
unsigned char seg[] = {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE,ZERO};
unsigned char lcd[] = {'0','1','2','3','4','5','6','7','8','9','0'};

int main(void)
{
	unsigned char key_pressed;
	clock_init();
	GPIO_init();
	LCD_init();
	wait_mss(500);
	LCD_displayString("ARAFA");
	wait_mss(500);
	LCD_clearScreen();

	for(unsigned char i = 0 ; i<11 ; i++){
		MCAL_GPIO_Write_Port(GPIOB, seg[i]<<9);
		wait_mss(500);
		LCD_displayCharacter(lcd[i]);
		wait_mss(500);
	}
	LCD_clearScreen();
	KEYPAD_init();
	wait_mss(500);
	LCD_displayString("keypad ready");
	wait_mss(500);
	LCD_clearScreen();
	while(1){

		key_pressed = KEYPAD_getKey();
		switch(key_pressed){
		case 'A':
			break;
		case '?':
			LCD_clearScreen();
			break;
		default:
			LCD_displayCharacter(key_pressed);
			break;
		}
	}
}
