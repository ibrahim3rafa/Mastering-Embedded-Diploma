/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


#include "../MCAL/includes/GPIO_driver.h"
#include"../MCAL/includes/STM32F103x6.h"
#include"../MCAL/includes/EXTI_driver.h"
#include"USART.h"
#include"RCC.h"

unsigned int IRQ_FLAG = 0;

void ARAFA_CallBack(void){
	MCAL_UART_SendDate(USART1, &ch, Disable);
	MCAL_UART_RecieveDate(USART1, &ch, Enable);
}

void clock_init(void){
	//	Bit 2 IOPAEN: IO port A clock enable
	//	Set and cleared by software.
	//	0: IO port A clock disabled
	//	1: IO port A clock enabled

	RCC_GPIOA_CLK_EN();


	//	Bit 3 IOPBEN: IO port B clock enable
	//	Set and cleared by software.
	//	0: IO port B clock disabled
	//	1: IO port B clock enabled
	RCC_GPIOB_CLK_EN();

	RCC_AFIO_CLK_EN();

	RCC_USART1_CLK_Enable();

}



void wait_mss(uint32_t time){
	uint32_t i,j ;
	for(i=0 ; i<time ; i++){
		for(j=0 ; j<255; j++);
	}
}


int main(void)
{
	unsigned  ch;
	clock_init();



	UART_Config uartcfg;

	uartcfg.BuadRate = UART_BuadRate_115200;
	uartcfg.HWFlowCtl = UART_HWFlowCtrl_NONE;
	uartcfg.IRQEnable = UART_IRQ_Enable_RXNE_or_ORE ;
	uartcfg.P_IRQ_CallBack = ARAFA_CallBack;
	uartcfg.Parity = UART_Parity_NONE;
	uartcfg.Word_Lenght = UART_Word_Lenght_8B;
	uartcfg.StopBits = UART_StopBits_One;
	uartcfg.USART_Mode = UART_Mode_RX_TX;

	MCAL_UART_Init(USART1, &uartcfg);
	MCAL_UART_GPIO_SetPins(USART1);

	while(1){


	}
}
